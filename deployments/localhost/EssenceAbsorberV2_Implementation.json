{
  "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum EssenceAbsorberV2.Lock",
          "name": "lock",
          "type": "uint8"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "undistributedRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accEssencePerEpShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdateRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPower",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UndistributedRewardsWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPower",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "util",
          "type": "uint256"
        }
      ],
      "name": "UtilizationRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTION_ABSORBER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIX_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREE_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWELVE_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWO_WEEKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "absorberRods",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "absorberRodsStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "absorberRodsStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accEssencePerEpShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exclude",
          "type": "address"
        }
      ],
      "name": "addExcludedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artifact",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artifactMetadataStore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "artifactPowerTable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "calcualteVestedPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum EssenceAbsorberV2.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "essence",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "essenceField",
      "outputs": [
        {
          "internalType": "contract IEssenceField",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "essenceTotalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getAbsorberRodsPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAllUserDepositIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_artifactGeneration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_artifactRarity",
          "type": "uint256"
        }
      ],
      "name": "getArtifactPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArtifactPowerTable",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExcludedAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EssenceAbsorberV2.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "getLockPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getNftPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_essenceReward",
          "type": "uint256"
        }
      ],
      "name": "getRealEssenceReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "distributedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "undistributedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedArtifacts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EssenceAbsorberV2.Lock",
          "name": "_lock",
          "type": "uint8"
        }
      ],
      "name": "getVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "harvestPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_essence",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_essenceField",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isArtifact1_1",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isArtifact1_1Staked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewardsAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardsPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "powers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_excluded",
          "type": "address"
        }
      ],
      "name": "removeExcludedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_absorberRods",
          "type": "address"
        }
      ],
      "name": "setAbsorberRods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_artifact",
          "type": "address"
        }
      ],
      "name": "setArtifact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_artifactMetadataStore",
          "type": "address"
        }
      ],
      "name": "setArtifactMetadataStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "_artifactPowerTable",
          "type": "uint256[][]"
        }
      ],
      "name": "setArtifactPowerTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_essence",
          "type": "address"
        }
      ],
      "name": "setEssenceToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_utilizationOverride",
          "type": "uint256"
        }
      ],
      "name": "setUtilizationOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeAbsorberRods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeArtifact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleUnlockAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEpToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardsEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUndistributedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeAbsorberRods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstakeArtifact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "originalDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingLastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        },
        {
          "internalType": "enum EssenceAbsorberV2.Lock",
          "name": "lock",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "util",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilizationOverride",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAndHarvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndHarvestPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawUndistributedRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2c96bdbca9370ff09eadf2a946f2e6b86bef3d1e6f1d4a2ba7f6fe3e5bd102e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
    "transactionIndex": 0,
    "gasUsed": "4789682",
    "logsBloom": "0x
    "blockHash": "0xe94542a025e5c279fa92e570a21f0d520fae15045eabbcc3b47b181216b47cb5",
    "transactionHash": "0xd2c96bdbca9370ff09eadf2a946f2e6b86bef3d1e6f1d4a2ba7f6fe3e5bd102e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17,
        "transactionHash": "0xd2c96bdbca9370ff09eadf2a946f2e6b86bef3d1e6f1d4a2ba7f6fe3e5bd102e",
        "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0xe94542a025e5c279fa92e570a21f0d520fae15045eabbcc3b47b181216b47cb5"
      }
    ],
    "blockNumber": 17,
    "cumulativeGasUsed": "4789682",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "179c5969a6e2a95153c16bf03df6a5b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum EssenceAbsorberV2.Lock\",\"name\":\"lock\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"undistributedRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accEssencePerEpShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPower\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UndistributedRewardsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPower\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"util\",\"type\":\"uint256\"}],\"name\":\"UtilizationRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTION_ABSORBER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIX_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREE_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWELVE_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO_WEEKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"absorberRods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"absorberRodsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"absorberRodsStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accEssencePerEpShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exclude\",\"type\":\"address\"}],\"name\":\"addExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artifact\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artifactMetadataStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artifactPowerTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calcualteVestedPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum EssenceAbsorberV2.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"essence\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"essenceField\",\"outputs\":[{\"internalType\":\"contract IEssenceField\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"essenceTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAbsorberRodsPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllUserDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artifactGeneration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_artifactRarity\",\"type\":\"uint256\"}],\"name\":\"getArtifactPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArtifactPowerTable\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EssenceAbsorberV2.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"getLockPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getNftPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_essenceReward\",\"type\":\"uint256\"}],\"name\":\"getRealEssenceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"distributedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"undistributedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedArtifacts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EssenceAbsorberV2.Lock\",\"name\":\"_lock\",\"type\":\"uint8\"}],\"name\":\"getVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"harvestPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_essence\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_essenceField\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isArtifact1_1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isArtifact1_1Staked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewardsAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"powers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_excluded\",\"type\":\"address\"}],\"name\":\"removeExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_absorberRods\",\"type\":\"address\"}],\"name\":\"setAbsorberRods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artifact\",\"type\":\"address\"}],\"name\":\"setArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artifactMetadataStore\",\"type\":\"address\"}],\"name\":\"setArtifactMetadataStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"_artifactPowerTable\",\"type\":\"uint256[][]\"}],\"name\":\"setArtifactPowerTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_essence\",\"type\":\"address\"}],\"name\":\"setEssenceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_utilizationOverride\",\"type\":\"uint256\"}],\"name\":\"setUtilizationOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeAbsorberRods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleUnlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEpToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUndistributedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeAbsorberRods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originalDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"},{\"internalType\":\"enum EssenceAbsorberV2.Lock\",\"name\":\"lock\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"util\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationOverride\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAndHarvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndHarvestPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawUndistributedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accEssencePerEpShare()\":{\"notice\":\"EP stands for ESSENCE POWER, representing the multiplier over the ESSENCE a user has, and thus their share of emissions this represents the amount of essence per ESSENCE POWER token shares that exist Having high EP enables a user to gain a greater share of emissions but does not increase the rate of ESSENCE emissions for the game.\"},\"currentId(address)\":{\"notice\":\"user => deposit index\"},\"pendingRewardsPosition(address,uint256)\":{\"notice\":\"essenceField.getPendingRewards: calculates the rewards still available to this absorber from the stream that was enabled getRealEssenceRewards, strangulates the stream by a % according to the utilization of this absorber\"},\"performanceBoost()\":{\"notice\":\"This function could do a chainlink request to obtain the person's social score from off-chain The score enters in the power equation of the user to calculate new EP (_recalculateEPAmount) If the update is done in a pull fashion, it is up to the user to call the function whenever he sees a surplus in reward from doing it (frontend could compute cost of update). It could also be called whenever the user deposits/harvests/withdraws/stakesNFTs If done in push fashion, system has to provide an ordered array of user addresses and Ids to update the power and _recalculate the EP amount. This involves a lot of gas costs and storage updates, but in a rollup could be doable.\"},\"toggleUnlockAll()\":{\"notice\":\"EMERGENCY ONLY\"},\"totalEpToken()\":{\"notice\":\"this represents the total amount of EP Shares that exist\"},\"userInfo(address,uint256)\":{\"notice\":\"user => depositId => UserInfo\"},\"utilization()\":{\"notice\":\"how this function calculates the utilization % of this absorber\"}},\"notice\":\"Contract is using an admin role to manage its configuration. Admin role is assigned to a multi-sig wallet controlled by trusted team members. Admin role aka FACTION_ABSORBER_ADMIN_ROLE, as initialized during init() to msg.sender can: \\u2022 Add/Remove addresses to excludedAddresses, which impacts the utilization calculation, by calling   addExcludedAddress() and removeExcludedAddress(), respectively. \\u2022 Set/Unset an arbitrary override value for the value returned by utilization(), by calling   setUtilizationOverride(). \\u2022 Change at any time the essence token address, which is set during init(), to an arbitrary one, by calling   setEssenceToken(). \\u2022 Set absorberRods to an arbitrary address (including address(0), in which case absorberRods staking/unstaking is   disabled), by calling setAbsorberRods(). \\u2022 Set artifact to an arbitrary address (including address(0), in which case artifact staking/unstaking is disabled),   by calling setArtifact(). \\u2022 Set artifactMetadataStore to an arbitrary address (used for artifact 1:1 checking and artifact nft power computation),   by calling setArtifactMetadataStore(). \\u2022 Re-set the artifactPowerTable array to arbitrary values, by calling setArtifactPowerTable(). \\u2022 Set/Unset the emergency unlockAll state, by calling toggleUnlockAll(). \\u2022 Withdraw all undistributed rewards to an arbitrary address, by calling withdrawUndistributedRewards().\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/EssenceAbsorberV2.sol\":\"EssenceAbsorberV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8defa7c9cc7cc4eb529daff535eff833f76a4cb424f85a08524eeea15e071a55\",\"license\":\"MIT\"},\"contracts/interfaces/IArtifactMetadataStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// TODO changes\\ninterface IArtifactMetadataStore {\\n    struct ArtifactMetadata {\\n        ArtifactGeneration artifactGeneration;\\n        ArtifactRarity artifactRarity;\\n    }\\n\\n    enum ArtifactRarity {\\n        LEGENDARY,\\n        EXOTIC,\\n        RARE,\\n        UNCOMMON,\\n        COMMON\\n    }\\n\\n    enum ArtifactGeneration {\\n        PRIMAL,\\n        SECONDARY\\n    }\\n\\n    // Sets the intial metadata for a token id.\\n    // Admin only.\\n    function setInitialMetadataForArtifact(\\n        address _owner,\\n        uint256 _tokenId,\\n        ArtifactGeneration _generation,\\n        ArtifactRarity _rarity\\n    ) external;\\n\\n    // Returns the metadata for the given artifact.\\n    function metadataForArtifact(uint256 _tokenId) external view returns (ArtifactMetadata memory);\\n}\\n\",\"keccak256\":\"0x9b8cb755a500e170a7d0e5749ca6ac97e50ebff63f959d0bed26ff0c9bfdd67a\",\"license\":\"MIT\"},\"contracts/interfaces/IEssenceField.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IEssenceField {\\n    struct EssenceFlow {\\n        uint256 totalRewards;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 ratePerSecond;\\n        uint256 paid;\\n    }\\n\\n    function requestRewards() external returns (uint256 rewardsPaid);\\n\\n    function grantTokenToFlow(address _flow, uint256 _amount) external;\\n\\n    function getFlows() external view returns (address[] memory);\\n\\n    function getFlowConfig(address _flow) external view returns (EssenceFlow memory);\\n\\n    function getGlobalRatePerSecond() external view returns (uint256 globalRatePerSecond);\\n\\n    function getRatePerSecond(address _flow) external view returns (uint256 ratePerSecond);\\n\\n    function getPendingRewards(address _flow) external view returns (uint256 pendingRewards);\\n}\\n\",\"keccak256\":\"0x806fca60a88d0b91c6562384e00b8298cc7dc2d229c4dc1ef5da233ae2c042fd\",\"license\":\"MIT\"},\"contracts/modules/EssenceAbsorberV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IEssenceField.sol\\\";\\nimport \\\"../interfaces/IArtifactMetadataStore.sol\\\";\\n\\n/// @notice Contract is using an admin role to manage its configuration. Admin role is assigned to a multi-sig\\n/// wallet controlled by trusted team members. Admin role aka FACTION_ABSORBER_ADMIN_ROLE, as initialized during init()\\n/// to msg.sender can:\\n/// \\u2022 Add/Remove addresses to excludedAddresses, which impacts the utilization calculation, by calling\\n///   addExcludedAddress() and removeExcludedAddress(), respectively.\\n/// \\u2022 Set/Unset an arbitrary override value for the value returned by utilization(), by calling\\n///   setUtilizationOverride().\\n/// \\u2022 Change at any time the essence token address, which is set during init(), to an arbitrary one, by calling\\n///   setEssenceToken().\\n/// \\u2022 Set absorberRods to an arbitrary address (including address(0), in which case absorberRods staking/unstaking is\\n///   disabled), by calling setAbsorberRods().\\n/// \\u2022 Set artifact to an arbitrary address (including address(0), in which case artifact staking/unstaking is disabled),\\n///   by calling setArtifact().\\n/// \\u2022 Set artifactMetadataStore to an arbitrary address (used for artifact 1:1 checking and artifact nft power computation),\\n///   by calling setArtifactMetadataStore().\\n/// \\u2022 Re-set the artifactPowerTable array to arbitrary values, by calling setArtifactPowerTable().\\n/// \\u2022 Set/Unset the emergency unlockAll state, by calling toggleUnlockAll().\\n/// \\u2022 Withdraw all undistributed rewards to an arbitrary address, by calling withdrawUndistributedRewards().\\ncontract EssenceAbsorberV2 is Initializable, AccessControlEnumerableUpgradeable, ERC1155HolderUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for int256;\\n\\n    enum Lock {\\n        twoWeeks,\\n        oneMonth,\\n        threeMonths,\\n        sixMonths,\\n        twelveMonths\\n    }\\n\\n    struct UserInfo {\\n        uint256 originalDepositAmount;\\n        uint256 depositAmount; //current deposit amount\\n        uint256 epAmount;\\n        uint256 lockedUntil;\\n        uint256 vestingLastUpdate;\\n        int256 rewardDebt;\\n        Lock lock;\\n    }\\n\\n    bytes32 public constant FACTION_ABSORBER_ADMIN_ROLE = keccak256(\\\"FACTION_ABSORBER_ADMIN_ROLE\\\");\\n\\n    uint256 public constant DAY = 1 days;\\n    uint256 public constant ONE_WEEK = 7 days;\\n    uint256 public constant TWO_WEEKS = ONE_WEEK * 2;\\n    uint256 public constant ONE_MONTH = 30 days;\\n    uint256 public constant THREE_MONTHS = ONE_MONTH * 3;\\n    uint256 public constant SIX_MONTHS = ONE_MONTH * 6;\\n    uint256 public constant TWELVE_MONTHS = 365 days;\\n    uint256 public constant ONE = 1e18;\\n\\n    // Essence token addr\\n    IERC20Upgradeable public essence;\\n    IEssenceField public essenceField;\\n\\n    bool public unlockAll;\\n\\n    uint256 public totalRewardsEarned;\\n    uint256 public totalUndistributedRewards;\\n\\n    /// EP stands for ESSENCE POWER, representing the multiplier over the ESSENCE a user has, and thus their share of emissions\\n    /// this represents the amount of essence per ESSENCE POWER token shares that exist\\n    /// Having high EP enables a user to gain a greater share of emissions but does not increase the rate of ESSENCE emissions for the game.\\n    uint256 public accEssencePerEpShare;\\n\\n    /// this represents the total amount of EP Shares that exist\\n    uint256 public totalEpToken;\\n    uint256 public essenceTotalDeposits;\\n\\n    uint256 public utilizationOverride;\\n    EnumerableSetUpgradeable.AddressSet private excludedAddresses;\\n\\n    address public artifactMetadataStore;\\n    address public absorberRods;\\n    address public artifact;\\n\\n    // user => staked 1/1\\n    mapping(address => bool) public isArtifact1_1Staked;\\n    uint256[][] public artifactPowerTable;\\n\\n    /// @notice user => depositId => UserInfo\\n    mapping(address => mapping(uint256 => UserInfo)) public userInfo;\\n    /// @notice user => depositId[]\\n    mapping(address => EnumerableSetUpgradeable.UintSet) private allUserDepositIds;\\n    /// @notice user => deposit index\\n    mapping(address => uint256) public currentId;\\n\\n    // user => tokenIds\\n    mapping(address => EnumerableSetUpgradeable.UintSet) private artifactStaked;\\n    // user => tokenId => amount\\n    mapping(address => mapping(uint256 => uint256)) public absorberRodsStaked;\\n    // user => total amount staked\\n    mapping(address => uint256) public absorberRodsStakedAmount;\\n    // user => power\\n    mapping(address => uint256) public powers;\\n\\n    event Staked(address nft, uint256 tokenId, uint256 amount, uint256 currentPower);\\n    event Unstaked(address nft, uint256 tokenId, uint256 amount, uint256 currentPower);\\n\\n    event Deposit(address indexed user, uint256 indexed index, uint256 amount, Lock lock);\\n    event Withdraw(address indexed user, uint256 indexed index, uint256 amount);\\n    event UndistributedRewardsWithdraw(address indexed to, uint256 amount);\\n    event Harvest(address indexed user, uint256 indexed index, uint256 amount);\\n    event LogUpdateRewards(\\n        uint256 distributedRewards,\\n        uint256 undistributedRewards,\\n        uint256 epSupply,\\n        uint256 accEssencePerEpShare\\n    );\\n    event UtilizationRate(uint256 util);\\n\\n    /// @notice what is the total epToken\\n    /// get distributed and undistributed rewards, accumulates them and calculates the amount of Essence per share\\n    /// This is called on every function\\n    modifier updateRewards() {\\n        uint256 epSupply = totalEpToken;\\n        if (epSupply > 0) {\\n            (uint256 distributedRewards, uint256 undistributedRewards) = getRealEssenceReward(\\n                essenceField.requestRewards()\\n            );\\n            totalRewardsEarned += distributedRewards;\\n            totalUndistributedRewards += undistributedRewards;\\n            accEssencePerEpShare += (distributedRewards * ONE) / epSupply;\\n            emit LogUpdateRewards(distributedRewards, undistributedRewards, epSupply, accEssencePerEpShare);\\n        }\\n\\n        uint256 util = utilization();\\n        emit UtilizationRate(util);\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function init(address _essence, address _essenceField) external initializer {\\n        essence = IERC20Upgradeable(_essence);\\n        essenceField = IEssenceField(_essenceField);\\n\\n        _setRoleAdmin(FACTION_ABSORBER_ADMIN_ROLE, FACTION_ABSORBER_ADMIN_ROLE);\\n        _grantRole(FACTION_ABSORBER_ADMIN_ROLE, msg.sender);\\n\\n        // array follows values from IArtifactMetadataStore.ArtifactGeneration and IArtifactMetadataStore.ArtifactRarity\\n        artifactPowerTable = [\\n            // PRIMAL\\n            // LEGENDARY,EXOTIC,RARE,UNCOMMON,COMMON\\n            [uint256(600e16), uint256(200e16), uint256(75e16), uint256(100e16), uint256(50e16)],\\n            // SECONDARY\\n            // LEGENDARY,EXOTIC,RARE,UNCOMMON,COMMON\\n            [uint256(40e16), uint256(25e16), uint256(15e16), uint256(10e16), uint256(5e16)]\\n        ];\\n\\n        __AccessControlEnumerable_init();\\n        __ERC1155Holder_init();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155ReceiverUpgradeable, AccessControlEnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function getStakedArtifacts(address _user) external view virtual returns (uint256[] memory) {\\n        return artifactStaked[_user].values();\\n    }\\n\\n    function getUserPower(address _user) external view virtual returns (uint256) {\\n        return powers[_user];\\n    }\\n\\n    function getArtifactPowerTable() external view virtual returns (uint256[][] memory) {\\n        return artifactPowerTable;\\n    }\\n\\n    function getArtifactPower(uint256 _artifactGeneration, uint256 _artifactRarity)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (\\n            _artifactGeneration < artifactPowerTable.length &&\\n            _artifactRarity < artifactPowerTable[_artifactGeneration].length\\n        ) {\\n            return artifactPowerTable[_artifactGeneration][_artifactRarity];\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice how this function calculates the utilization % of this absorber\\n    function utilization() public view virtual returns (uint256 util) {\\n        if (utilizationOverride > 0) return utilizationOverride;\\n\\n        uint256 circulatingSupply = essence.totalSupply();\\n        uint256 len = excludedAddresses.length();\\n        for (uint256 i = 0; i < len; i++) {\\n            circulatingSupply -= essence.balanceOf(excludedAddresses.at(i));\\n        }\\n        uint256 rewardsAmount = essence.balanceOf(address(this)) - essenceTotalDeposits;\\n        circulatingSupply -= rewardsAmount;\\n        if (circulatingSupply != 0) {\\n            util = (essenceTotalDeposits * ONE) / circulatingSupply;\\n        }\\n    }\\n\\n    function getRealEssenceReward(uint256 _essenceReward)\\n        public\\n        view\\n        virtual\\n        returns (uint256 distributedRewards, uint256 undistributedRewards)\\n    {\\n        uint256 util = utilization();\\n\\n        if (util < 3e17) {\\n            distributedRewards = 0;\\n        } else if (util < 4e17) {\\n            // >30%\\n            // 50%\\n            distributedRewards = (_essenceReward * 5) / 10;\\n        } else if (util < 5e17) {\\n            // >40%\\n            // 60%\\n            distributedRewards = (_essenceReward * 6) / 10;\\n        } else if (util < 6e17) {\\n            // >50%\\n            // 80%\\n            distributedRewards = (_essenceReward * 8) / 10;\\n        } else {\\n            // >60%\\n            // 100%\\n            distributedRewards = _essenceReward;\\n        }\\n\\n        undistributedRewards = _essenceReward - distributedRewards;\\n    }\\n\\n    function getAllUserDepositIds(address _user) public view virtual returns (uint256[] memory) {\\n        return allUserDepositIds[_user].values();\\n    }\\n\\n    function getExcludedAddresses() public view virtual returns (address[] memory) {\\n        return excludedAddresses.values();\\n    }\\n\\n    function getLockPower(Lock _lock) public pure virtual returns (uint256 power, uint256 timelock) {\\n        if (_lock == Lock.twoWeeks) {\\n            // 10%\\n            return (10e16, TWO_WEEKS);\\n        } else if (_lock == Lock.oneMonth) {\\n            // 25%\\n            return (25e16, ONE_MONTH);\\n        } else if (_lock == Lock.threeMonths) {\\n            // 80%\\n            return (80e16, THREE_MONTHS);\\n        } else if (_lock == Lock.sixMonths) {\\n            // 180%\\n            return (180e16, SIX_MONTHS);\\n        } else if (_lock == Lock.twelveMonths) {\\n            // 400%\\n            return (400e16, TWELVE_MONTHS);\\n        } else {\\n            revert(\\\"Invalid lock value\\\");\\n        }\\n    }\\n\\n    function getVestingTime(Lock _lock) public pure virtual returns (uint256 vestingTime) {\\n        if (_lock == Lock.twoWeeks) {\\n            vestingTime = 0;\\n        } else if (_lock == Lock.oneMonth) {\\n            vestingTime = 7 days;\\n        } else if (_lock == Lock.threeMonths) {\\n            vestingTime = 14 days;\\n        } else if (_lock == Lock.sixMonths) {\\n            vestingTime = 30 days;\\n        } else if (_lock == Lock.twelveMonths) {\\n            vestingTime = 45 days;\\n        }\\n    }\\n\\n    function calcualteVestedPrincipal(address _user, uint256 _depositId) public view virtual returns (uint256 amount) {\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        Lock _lock = user.lock;\\n        uint256 originalDepositAmount = user.originalDepositAmount;\\n\\n        uint256 vestingEnd = user.lockedUntil + getVestingTime(_lock);\\n        uint256 vestingBegin = user.lockedUntil;\\n\\n        if (block.timestamp >= vestingEnd || unlockAll) {\\n            amount = user.depositAmount;\\n        } else if (block.timestamp > vestingBegin) {\\n            uint256 amountVested = (originalDepositAmount * (block.timestamp - vestingBegin)) /\\n                (vestingEnd - vestingBegin);\\n            uint256 amountWithdrawn = originalDepositAmount - user.depositAmount;\\n            if (amountWithdrawn < amountVested) {\\n                amount = amountVested - amountWithdrawn;\\n            }\\n        }\\n    }\\n\\n    /// @notice essenceField.getPendingRewards: calculates the rewards still available to this absorber from the stream that was enabled\\n    /// getRealEssenceRewards, strangulates the stream by a % according to the utilization of this absorber\\n    function pendingRewardsPosition(address _user, uint256 _depositId) public view virtual returns (uint256 pending) {\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        uint256 _accEssencePerEpShare = accEssencePerEpShare;\\n        uint256 epSupply = totalEpToken;\\n\\n        (uint256 distributedRewards, ) = getRealEssenceReward(essenceField.getPendingRewards(address(this)));\\n        _accEssencePerEpShare += (distributedRewards * ONE) / epSupply;\\n\\n        int256 rewardDebt = user.rewardDebt;\\n        int256 accumulatedEssence = ((user.epAmount * _accEssencePerEpShare) / ONE).toInt256();\\n\\n        if (accumulatedEssence >= rewardDebt) {\\n            pending = (accumulatedEssence - rewardDebt).toUint256();\\n        }\\n    }\\n\\n    function pendingRewardsAll(address _user) external view virtual returns (uint256 pending) {\\n        uint256 len = allUserDepositIds[_user].length();\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 depositId = allUserDepositIds[_user].at(i);\\n            pending += pendingRewardsPosition(_user, depositId);\\n        }\\n    }\\n\\n    function deposit(uint256 _amount, Lock _lock) public virtual updateRewards {\\n        require(allUserDepositIds[msg.sender].length() < 3000, \\\"Max deposits number reached\\\");\\n\\n        (UserInfo storage user, uint256 depositId) = _addDeposit(msg.sender);\\n        (uint256 lockPower, uint256 timelock) = getLockPower(_lock);\\n        uint256 nftPower = powers[msg.sender];\\n\\n        /// deposit amount * (1 + additive % boosts)\\n        uint256 epAmount = _amount + (_amount * (lockPower + nftPower)) / ONE;\\n        essenceTotalDeposits += _amount;\\n        totalEpToken += epAmount;\\n\\n        user.originalDepositAmount = _amount;\\n        user.depositAmount = _amount;\\n        user.epAmount = epAmount;\\n        user.lockedUntil = block.timestamp + timelock;\\n        user.vestingLastUpdate = user.lockedUntil;\\n\\n        /// amount of essence in debt to the user according to his Essence power\\n        /// It's like calculating a staker total rewards since block 0,\\n        /// but removing the rewards they already harvested or the rewards their were not eligibly to claim because they weren't staking yet.\\n        user.rewardDebt = ((epAmount * accEssencePerEpShare) / ONE).toInt256();\\n        user.lock = _lock;\\n\\n        essence.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, depositId, _amount, _lock);\\n    }\\n\\n    function withdrawPosition(uint256 _depositId, uint256 _amount) public virtual updateRewards returns (bool) {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n        uint256 depositAmount = user.depositAmount;\\n        if (depositAmount == 0) return false;\\n\\n        if (_amount > depositAmount) {\\n            _amount = depositAmount;\\n        }\\n\\n        // anyone can withdraw if kill swith was used\\n        if (!unlockAll) {\\n            require(block.timestamp >= user.lockedUntil, \\\"Position is still locked\\\");\\n            uint256 vestedAmount = _vestedPrincipal(msg.sender, _depositId);\\n            if (_amount > vestedAmount) {\\n                _amount = vestedAmount;\\n            }\\n        }\\n\\n        // Effects\\n\\n        /// @notice how this calculates the % of total deposited being withdrawn and reduces the same % in the user EP amount/total EP\\n        uint256 ratio = (_amount * ONE) / depositAmount;\\n        uint256 epAmount = (user.epAmount * ratio) / ONE;\\n\\n        totalEpToken -= epAmount;\\n        essenceTotalDeposits -= _amount;\\n\\n        user.depositAmount -= _amount;\\n        user.epAmount -= epAmount;\\n\\n        /// reduces the debt to the user with the reduced EP amount\\n        /// It's interesting to note how no check is being made to the users' reward debt, could cause underflows?\\n        /// perhaps when a full withdraw is done this function could be improved\\n        user.rewardDebt -= ((epAmount * accEssencePerEpShare) / ONE).toInt256();\\n\\n        // Interactions\\n        essence.safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _depositId, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawAll() public virtual {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            withdrawPosition(depositIds[i], type(uint256).max);\\n        }\\n    }\\n\\n    function harvestPosition(uint256 _depositId) public virtual updateRewards {\\n        UserInfo storage user = userInfo[msg.sender][_depositId];\\n\\n        uint256 _pendingEssence = 0;\\n        /// user current reward debt\\n        int256 rewardDebt = user.rewardDebt;\\n\\n        /// user new reward debt based on new accEssencePerEpShare\\n        int256 newRewardDebt = ((user.epAmount * accEssencePerEpShare) / ONE).toInt256();\\n\\n        if (newRewardDebt >= rewardDebt) {\\n            _pendingEssence = (newRewardDebt - rewardDebt).toUint256();\\n        }\\n\\n        // Effects\\n        user.rewardDebt = newRewardDebt;\\n\\n        if (user.depositAmount == 0 && user.epAmount == 0) {\\n            _removeDeposit(msg.sender, _depositId);\\n        }\\n\\n        // Interactions\\n        if (_pendingEssence != 0) {\\n            essence.safeTransfer(msg.sender, _pendingEssence);\\n        }\\n\\n        emit Harvest(msg.sender, _depositId, _pendingEssence);\\n\\n        require(essence.balanceOf(address(this)) >= essenceTotalDeposits, \\\"Run on banks\\\");\\n    }\\n\\n    function harvestAll() public virtual {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            harvestPosition(depositIds[i]);\\n        }\\n    }\\n\\n    function withdrawAndHarvestPosition(uint256 _depositId, uint256 _amount) public virtual {\\n        withdrawPosition(_depositId, _amount);\\n        harvestPosition(_depositId);\\n    }\\n\\n    function withdrawAndHarvestAll() public virtual {\\n        uint256[] memory depositIds = allUserDepositIds[msg.sender].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            withdrawAndHarvestPosition(depositIds[i], type(uint256).max);\\n        }\\n    }\\n\\n    function stakeAbsorberRods(uint256 _tokenId, uint256 _amount) external virtual updateRewards {\\n        require(absorberRods != address(0), \\\"Cannot stake AbsorberRods\\\");\\n        require(_amount > 0, \\\"Amount is 0\\\");\\n\\n        absorberRodsStaked[msg.sender][_tokenId] += _amount;\\n        absorberRodsStakedAmount[msg.sender] += _amount;\\n\\n        require(absorberRodsStakedAmount[msg.sender] <= 20, \\\"Max 20 absorberRods per wallet\\\");\\n\\n        uint256 power = getNftPower(absorberRods, _tokenId, _amount);\\n        powers[msg.sender] += power;\\n\\n        _recalculateEpAmount(msg.sender);\\n\\n        IERC1155Upgradeable(absorberRods).safeTransferFrom(msg.sender, address(this), _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Staked(absorberRods, _tokenId, _amount, powers[msg.sender]);\\n    }\\n\\n    function unstakeAbsorberRods(uint256 _tokenId, uint256 _amount) external virtual updateRewards {\\n        require(absorberRods != address(0), \\\"Cannot stake AbsorberRods\\\");\\n        require(_amount > 0, \\\"Amount is 0\\\");\\n        require(absorberRodsStaked[msg.sender][_tokenId] >= _amount, \\\"Withdraw amount too big\\\");\\n\\n        absorberRodsStaked[msg.sender][_tokenId] -= _amount;\\n        absorberRodsStakedAmount[msg.sender] -= _amount;\\n\\n        uint256 power = getNftPower(absorberRods, _tokenId, _amount);\\n        powers[msg.sender] -= power;\\n\\n        _recalculateEpAmount(msg.sender);\\n\\n        IERC1155Upgradeable(absorberRods).safeTransferFrom(address(this), msg.sender, _tokenId, _amount, bytes(\\\"\\\"));\\n\\n        emit Unstaked(absorberRods, _tokenId, _amount, powers[msg.sender]);\\n    }\\n\\n    /// This function could do a chainlink request to obtain the person's social score from off-chain\\n    /// The score enters in the power equation of the user to calculate new EP (_recalculateEPAmount)\\n    /// If the update is done in a pull fashion, it is up to the user to call the function whenever he\\n    /// sees a surplus in reward from doing it (frontend could compute cost of update).\\n    /// It could also be called whenever the user deposits/harvests/withdraws/stakesNFTs\\n    /// If done in push fashion, system has to provide an ordered array of user addresses and Ids to update the power\\n    /// and _recalculate the EP amount. This involves a lot of gas costs and storage updates, but in a rollup could be doable.\\n    function performanceBoost() external {}\\n\\n    function stakeArtifact(uint256 _tokenId) external virtual updateRewards {\\n        require(artifact != address(0), \\\"Cannot stake Artifact\\\");\\n        require(artifactStaked[msg.sender].add(_tokenId), \\\"NFT already staked\\\");\\n        require(artifactStaked[msg.sender].length() <= 3, \\\"Max 3 artifacts per wallet\\\");\\n\\n        /// if it is a top tier artifact (primal legendary) only one is allowed to be staked per wallet\\n        if (isArtifact1_1(_tokenId)) {\\n            require(!isArtifact1_1Staked[msg.sender], \\\"Max 1 1/1 artifact per wallet\\\");\\n            isArtifact1_1Staked[msg.sender] = true;\\n        }\\n\\n        uint256 power = getNftPower(artifact, _tokenId, 1);\\n        powers[msg.sender] += power;\\n\\n        /// could be reused to change a users' EP based on a changed player performance\\n        _recalculateEpAmount(msg.sender);\\n\\n        IERC721Upgradeable(artifact).transferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit Staked(artifact, _tokenId, 1, powers[msg.sender]);\\n    }\\n\\n    function unstakeArtifact(uint256 _tokenId) external virtual updateRewards {\\n        require(artifactStaked[msg.sender].remove(_tokenId), \\\"NFT is not staked\\\");\\n\\n        if (isArtifact1_1(_tokenId)) {\\n            isArtifact1_1Staked[msg.sender] = false;\\n        }\\n\\n        uint256 power = getNftPower(artifact, _tokenId, 1);\\n        powers[msg.sender] -= power;\\n\\n        _recalculateEpAmount(msg.sender);\\n\\n        IERC721Upgradeable(artifact).transferFrom(address(this), msg.sender, _tokenId);\\n\\n        emit Unstaked(artifact, _tokenId, 1, powers[msg.sender]);\\n    }\\n\\n    function isArtifact1_1(uint256 _tokenId) public view virtual returns (bool) {\\n        try IArtifactMetadataStore(artifactMetadataStore).metadataForArtifact(_tokenId) returns (\\n            IArtifactMetadataStore.ArtifactMetadata memory metadata\\n        ) {\\n            return\\n                metadata.artifactGeneration == IArtifactMetadataStore.ArtifactGeneration.PRIMAL &&\\n                metadata.artifactRarity == IArtifactMetadataStore.ArtifactRarity.LEGENDARY;\\n        } catch Error(\\n            string memory /*reason*/\\n        ) {\\n            return false;\\n        } catch Panic(uint256) {\\n            return false;\\n        } catch (\\n            bytes memory /*lowLevelData*/\\n        ) {\\n            return false;\\n        }\\n    }\\n\\n    function getNftPower(\\n        address _nft,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) public view virtual returns (uint256) {\\n        if (_nft == absorberRods) {\\n            return getAbsorberRodsPower(_amount);\\n        } else if (_nft == artifact) {\\n            try IArtifactMetadataStore(artifactMetadataStore).metadataForArtifact(_tokenId) returns (\\n                IArtifactMetadataStore.ArtifactMetadata memory metadata\\n            ) {\\n                return getArtifactPower(uint256(metadata.artifactGeneration), uint256(metadata.artifactRarity));\\n            } catch Error(\\n                string memory /*reason*/\\n            ) {\\n                return 0;\\n            } catch Panic(uint256) {\\n                return 0;\\n            } catch (\\n                bytes memory /*lowLevelData*/\\n            ) {\\n                return 0;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @notice this function could be used to change the user Essence power if his performance in game changes\\n    function _recalculateEpAmount(address _user) internal virtual {\\n        uint256 nftPower = powers[_user];\\n\\n        uint256[] memory depositIds = allUserDepositIds[_user].values();\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            uint256 depositId = depositIds[i];\\n            UserInfo storage user = userInfo[_user][depositId];\\n\\n            (uint256 lockPower, ) = getLockPower(user.lock);\\n            uint256 _amount = user.depositAmount;\\n            uint256 newEpAmount = _amount + (_amount * (lockPower + nftPower)) / ONE;\\n            uint256 oldEpAmount = user.epAmount;\\n\\n            if (newEpAmount > oldEpAmount) {\\n                uint256 epDiff = newEpAmount - oldEpAmount;\\n                user.rewardDebt += ((epDiff * accEssencePerEpShare) / ONE).toInt256();\\n                totalEpToken += epDiff;\\n                user.epAmount += epDiff;\\n            } else if (newEpAmount < oldEpAmount) {\\n                uint256 epDiff = oldEpAmount - newEpAmount;\\n                user.rewardDebt -= ((epDiff * accEssencePerEpShare) / ONE).toInt256();\\n                totalEpToken -= epDiff;\\n                user.epAmount -= epDiff;\\n            }\\n        }\\n    }\\n\\n    function addExcludedAddress(address _exclude) external virtual onlyRole(FACTION_ABSORBER_ADMIN_ROLE) updateRewards {\\n        require(excludedAddresses.add(_exclude), \\\"Address already excluded\\\");\\n    }\\n\\n    function removeExcludedAddress(address _excluded)\\n        external\\n        virtual\\n        onlyRole(FACTION_ABSORBER_ADMIN_ROLE)\\n        updateRewards\\n    {\\n        require(excludedAddresses.remove(_excluded), \\\"Address is not excluded\\\");\\n    }\\n\\n    function setUtilizationOverride(uint256 _utilizationOverride)\\n        external\\n        virtual\\n        onlyRole(FACTION_ABSORBER_ADMIN_ROLE)\\n        updateRewards\\n    {\\n        utilizationOverride = _utilizationOverride;\\n    }\\n\\n    function setEssenceToken(address _essence) external virtual onlyRole(FACTION_ABSORBER_ADMIN_ROLE) {\\n        essence = IERC20Upgradeable(_essence);\\n    }\\n\\n    function setAbsorberRods(address _absorberRods) external virtual onlyRole(FACTION_ABSORBER_ADMIN_ROLE) {\\n        absorberRods = _absorberRods;\\n    }\\n\\n    function setArtifact(address _artifact) external virtual onlyRole(FACTION_ABSORBER_ADMIN_ROLE) {\\n        artifact = _artifact;\\n    }\\n\\n    function setArtifactMetadataStore(address _artifactMetadataStore)\\n        external\\n        virtual\\n        onlyRole(FACTION_ABSORBER_ADMIN_ROLE)\\n    {\\n        artifactMetadataStore = _artifactMetadataStore;\\n    }\\n\\n    function setArtifactPowerTable(uint256[][] memory _artifactPowerTable)\\n        external\\n        virtual\\n        onlyRole(FACTION_ABSORBER_ADMIN_ROLE)\\n    {\\n        artifactPowerTable = _artifactPowerTable;\\n    }\\n\\n    /// @notice EMERGENCY ONLY\\n    function toggleUnlockAll() external virtual onlyRole(FACTION_ABSORBER_ADMIN_ROLE) updateRewards {\\n        unlockAll = unlockAll ? false : true;\\n    }\\n\\n    function withdrawUndistributedRewards(address _to)\\n        external\\n        virtual\\n        onlyRole(FACTION_ABSORBER_ADMIN_ROLE)\\n        updateRewards\\n    {\\n        uint256 _totalUndistributedRewards = totalUndistributedRewards;\\n        totalUndistributedRewards = 0;\\n\\n        essence.safeTransfer(_to, _totalUndistributedRewards);\\n        emit UndistributedRewardsWithdraw(_to, _totalUndistributedRewards);\\n    }\\n\\n    function getAbsorberRodsPower(uint256 _amount) public pure virtual returns (uint256 power) {\\n        power = 10e15 * _amount;\\n    }\\n\\n    function _vestedPrincipal(address _user, uint256 _depositId) internal virtual returns (uint256 amount) {\\n        amount = calcualteVestedPrincipal(_user, _depositId);\\n        UserInfo storage user = userInfo[_user][_depositId];\\n        user.vestingLastUpdate = block.timestamp;\\n    }\\n\\n    function _addDeposit(address _user) internal virtual returns (UserInfo storage user, uint256 newDepositId) {\\n        // start depositId from 1\\n        newDepositId = ++currentId[_user];\\n        allUserDepositIds[_user].add(newDepositId);\\n        user = userInfo[_user][newDepositId];\\n    }\\n\\n    function _removeDeposit(address _user, uint256 _depositId) internal virtual {\\n        require(allUserDepositIds[_user].remove(_depositId), \\\"depositId !exists\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa1a7f4924f4bb647b781ff14257698f82322bf2c7beaa1c65b09265f6855dbbc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061046a5760003560e01c8063853828b61161024c578063bc197c8111610146578063d82b99d7116100c3578063f09a401611610087578063f09a401614610a76578063f15576a614610a89578063f23a6e6114610a93578063faa535af14610ab2578063fd90904c14610ac557600080fd5b8063d82b99d714610a1f578063d9914e8514610a32578063e4fb824114610a45578063ea21cd9214610a66578063ecbefab714610a6e57600080fd5b8063ca15c8731161010a578063ca15c873146109c7578063cd11be3e146109da578063cd24b0a3146109e4578063d44c0a63146109f9578063d547741f14610a0c57600080fd5b8063bc197c8114610950578063bf7cb26414610988578063c2ee3a081461099b578063c4048800146109aa578063c47b633f146109bd57600080fd5b8063a217fddf116101d4578063a9e8084e11610198578063a9e8084e146108fc578063aba617021461090f578063b04a699614610922578063b260177814610935578063ba579c741461094857600080fd5b8063a217fddf146108a7578063a5b063be146108af578063a646c35d146108c3578063a7e69fb4146108d6578063a9b54bcd146108e957600080fd5b80639010d07c1161021b5780639010d07c1461085357806391d1485414610866578063934d1fa4146108795780639428e0d9146108815780639931c4031461089457600080fd5b8063853828b61461082f5780638d8a0371146108375780638e6f6b77146108415780638ed955b91461084b57600080fd5b806336568abe1161036857806362c2fd6b116102e557806373503857116102a957806373503857146107db57806378a7770c146107e35780637a9de514146108075780637c0c9199146108115780637c4a485c1461082457600080fd5b806362c2fd6b14610766578063654cfdff1461077a578063688e90601461078d5780636902bd10146107b55780636930987e146107c857600080fd5b806353db390c1161032c57806353db390c1461070457806359fe213b146107175780635b35dd521461072a5780635c7abcc21461073d5780635fdf199a1461075157600080fd5b806336568abe1461068b57806339d9924a1461069e5780633ac28642146106ca5780635235ebb7146106dd578063532572d6146106f057600080fd5b806320f8e94e116103f657806327cfe856116103ba57806327cfe856146106495780632aa64534146106535780632b9f6a911461065b5780632f2ff15d146106655780632f623e771461067857600080fd5b806320f8e94e1461058557806321ce919d146105985780632299b8fa14610605578063248a9ca31461062657806327ca8e9d1461054d57600080fd5b80631156d8491161043d5780631156d849146105105780631245aeaf14610525578063138f77821461053a5780631ea5360a1461054f57806320988cef1461057b57600080fd5b806301ffc9a71461046f57806302931e59146104975780630dd4117a146104cf5780630fd74ee0146104ef575b600080fd5b61048261047d366004614a73565b610ad8565b60405190151581526020015b60405180910390f35b6104c16104a5366004614ab4565b6001600160a01b03166000908152610142602052604090205490565b60405190815260200161048e565b6104e26104dd366004614ab4565b610ae9565b60405161048e9190614acf565b6104c16104fd366004614ab4565b6101426020526000908152604090205481565b610518610b0e565b60405161048e9190614b13565b6104c16000805160206154dd83398151915281565b61054d610548366004614ab4565b610ba8565b005b6104c161055d366004614b9d565b61014060209081526000928352604080842090915290825290205481565b6104c162278d0081565b61054d610593366004614bc7565b610be4565b6105f26105a6366004614b9d565b61013c6020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919060ff1687565b60405161048e9796959493929190614c18565b6104c1610613366004614ab4565b61013e6020526000908152604090205481565b6104c1610634366004614bc7565b60009081526065602052604090206001015490565b6104c16201518081565b61054d610ef7565b6104c16101325481565b61054d610673366004614c5a565b61108d565b6104c1610686366004614c93565b6110b7565b61054d610699366004614c5a565b611166565b610137546106b2906001600160a01b031681565b6040516001600160a01b03909116815260200161048e565b61054d6106d8366004614bc7565b6111e4565b6104e26106eb366004614ab4565b611345565b61012e546106b2906001600160a01b031681565b6104c1610712366004614cb0565b61136a565b6104c1610725366004614ab4565b6113ec565b610482610738366004614bc7565b611473565b61012d546106b2906001600160a01b031681565b610759611594565b60405161048e9190614cd2565b610139546106b2906001600160a01b031681565b61054d610788366004614d13565b6115a6565b6107a061079b366004614c93565b6118bf565b6040805192835260208301919091520161048e565b6104c16107c3366004614b9d565b6119f4565b61054d6107d6366004614ab4565b611adb565b61054d611b17565b6104826107f1366004614ab4565b61013a6020526000908152604090205460ff1681565b6104c16101345481565b61054d61081f366004614cb0565b611b75565b6104c16301e1338081565b61054d611f30565b6104c16101315481565b6104c162093a8081565b61054d611f8f565b6106b2610861366004614cb0565b611fea565b610482610874366004614c5a565b612002565b6104c161202d565b61054d61088f366004614ab4565b61203e565b61054d6108a2366004614bc7565b61207a565b6104c1600081565b610138546106b2906001600160a01b031681565b61054d6108d1366004614ab4565b612359565b61054d6108e4366004614cb0565b61250f565b61054d6108f7366004614ab4565b612523565b61054d61090a366004614cb0565b6126d3565b61054d61091d366004614bc7565b612a75565b6104c1610930366004614d43565b612e66565b61054d610943366004614e4e565b612fc9565b6104c1612ff5565b61096f61095e366004614f7e565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161048e565b6107a0610996366004614bc7565b613003565b6104c1670de0b6b3a764000081565b6104c16109b8366004614cb0565b6130a9565b6104c16101305481565b6104c16109d5366004614bc7565b6130e7565b6104c16101335481565b61012e5461048290600160a01b900460ff1681565b6104c1610a07366004614bc7565b6130fe565b61054d610a1a366004614c5a565b613111565b610482610a2d366004614cb0565b613136565b61054d610a40366004614ab4565b61347f565b6104c1610a53366004614ab4565b6101416020526000908152604090205481565b6104c1613643565b6104c1613843565b61054d610a84366004615028565b613851565b6104c161012f5481565b61096f610aa1366004615052565b63f23a6e6160e01b95945050505050565b61054d610ac0366004614ab4565b613a8f565b6104c1610ad3366004614b9d565b613acb565b6000610ae382613bce565b92915050565b6001600160a01b038116600090815261013d60205260409020606090610ae390613bf3565b606061013b805480602002602001604051908101604052809291908181526020016000905b82821015610b9f57600084815260209081902083018054604080518285028101850190915281815292830182828015610b8b57602002820191906000526020600020905b815481526020019060010190808311610b77575b505050505081526020019060010190610b33565b50505050905090565b6000805160206154dd833981519152610bc081613c00565b5061013980546001600160a01b0319166001600160a01b0392909216919091179055565b610132548015610d1557600080610c6e61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099691906150b7565b915091508161012f6000828254610c8591906150e6565b92505081905550806101306000828254610c9f91906150e6565b90915550839050610cb8670de0b6b3a7640000846150f9565b610cc29190615118565b6101316000828254610cd491906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000610d1f613643565b90506000805160206154bd83398151915281604051610d4091815260200190565b60405180910390a133600090815261013c60209081526040808320868452909152812060058101546101315460028301549293928391610d9c91670de0b6b3a764000091610d8d916150f9565b610d979190615118565b613c0d565b9050818112610dba57610db7610db2838361513a565b613c7b565b92505b600584018190556001840154158015610dd557506002840154155b15610de457610de43388613ccd565b8215610e025761012d54610e02906001600160a01b03163385613d30565b604051838152879033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a36101335461012d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa91906150b7565b1015610eec5760405162461bcd60e51b815260206004820152600c60248201526b52756e206f6e2062616e6b7360a01b60448201526064015b60405180910390fd5b50505050505050565b565b6000805160206154dd833981519152610f0f81613c00565b61013254801561101c57600080610f7561012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f6000828254610f8c91906150e6565b92505081905550806101306000828254610fa691906150e6565b90915550839050610fbf670de0b6b3a7640000846150f9565b610fc99190615118565b6101316000828254610fdb91906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000611026613643565b90506000805160206154bd8339815191528160405161104791815260200190565b60405180910390a161012e54600160a01b900460ff1661106857600161106b565b60005b61012e8054911515600160a01b0260ff60a01b19909216919091179055505050565b6000828152606560205260409020600101546110a881613c00565b6110b28383613d93565b505050565b6000808260048111156110cc576110cc614be0565b036110d957506000919050565b60018260048111156110ed576110ed614be0565b036110fc575062093a80919050565b600282600481111561111057611110614be0565b0361111f575062127500919050565b600382600481111561113357611133614be0565b03611142575062278d00919050565b600482600481111561115657611156614be0565b036111615750623b53805b919050565b6001600160a01b03811633146111d65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610ee3565b6111e08282613db5565b5050565b6000805160206154dd8339815191526111fc81613c00565b6101325480156113095760008061126261012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f600082825461127991906150e6565b9250508190555080610130600082825461129391906150e6565b909155508390506112ac670de0b6b3a7640000846150f9565b6112b69190615118565b61013160008282546112c891906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000611313613643565b90506000805160206154bd8339815191528160405161133491815260200190565b60405180910390a150505061013455565b6001600160a01b038116600090815261013f60205260409020606090610ae390613bf3565b61013b546000908310801561139d575061013b838154811061138e5761138e61515a565b60009182526020909120015482105b156113e35761013b83815481106113b6576113b661515a565b9060005260206000200182815481106113d1576113d161515a565b90600052602060002001549050610ae3565b50600092915050565b6001600160a01b038116600090815261013d60205260408120819061141090613dd7565b905060005b8181101561146c576001600160a01b038416600090815261013d602052604081206114409083613de1565b905061144c8582613acb565b61145690856150e6565b935050808061146490615170565b915050611415565b5050919050565b610137546040516328225a8160e21b8152600481018390526000916001600160a01b03169063a0896a04906024016040805180830381865afa9250505080156114d9575060408051601f3d908101601f191682019092526114d691810190615189565b60015b611556576114e56151ec565b806308c379a00361150457506114f9615208565b806113e3575061151d565b634e487b710361151d57611516615292565b906113e357505b3d808015611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b5060009392505050565b60008151600181111561156b5761156b614be0565b14801561158d575060008160200151600481111561158b5761158b614be0565b145b9392505050565b60606115a1610135613bf3565b905090565b6101325480156116b35760008061160c61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f600082825461162391906150e6565b9250508190555080610130600082825461163d91906150e6565b90915550839050611656670de0b6b3a7640000846150f9565b6116609190615118565b610131600082825461167291906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b60006116bd613643565b90506000805160206154bd833981519152816040516116de91815260200190565b60405180910390a133600090815261013d60205260409020610bb89061170390613dd7565b106117505760405162461bcd60e51b815260206004820152601b60248201527f4d6178206465706f73697473206e756d626572207265616368656400000000006044820152606401610ee3565b60008061175c33613ded565b9150915060008061176c876118bf565b3360009081526101426020526040812054929450909250670de0b6b3a764000061179683866150e6565b6117a0908c6150f9565b6117aa9190615118565b6117b4908b6150e6565b90508961013360008282546117c991906150e6565b925050819055508061013260008282546117e391906150e6565b9091555050898655600186018a90556002860181905561180383426150e6565b6003870181905560048701556101315461182b90670de0b6b3a764000090610d8d90846150f9565b60058701556006860180548a919060ff1916600183600481111561185157611851614be0565b021790555061012d5461186f906001600160a01b031633308d613e6c565b84336001600160a01b03167fa7db47d395930224de3f54139208b4a958fe3747c2ad1dee5a6624643a6def938c8c6040516118ab9291906152b2565b60405180910390a350505050505050505050565b600080808360048111156118d5576118d5614be0565b036118fa5767016345785d8a00006118f162093a8060026150f9565b91509150915091565b600183600481111561190e5761190e614be0565b0361192857506703782dace9d900009262278d0092509050565b600283600481111561193c5761193c614be0565b0361195857670b1a2bc2ec5000006118f162278d0060036150f9565b600383600481111561196c5761196c614be0565b03611988576718fae27693b400006118f162278d0060066150f9565b600483600481111561199c5761199c614be0565b036119b75750673782dace9d900000926301e1338092509050565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c6964206c6f636b2076616c756560701b6044820152606401610ee3565b6001600160a01b038216600090815261013c6020908152604080832084845290915281206006810154815460ff9091169083611a2f836110b7565b8460030154611a3e91906150e6565b60038501549091504282111580611a5f575061012e54600160a01b900460ff165b15611a705784600101549550611ad0565b80421115611ad0576000611a8482846152c6565b611a8e83426152c6565b611a9890866150f9565b611aa29190615118565b90506000866001015485611ab691906152c6565b905081811015611acd57611aca81836152c6565b97505b50505b505050505092915050565b6000805160206154dd833981519152611af381613c00565b5061013880546001600160a01b0319166001600160a01b0392909216919091179055565b33600090815261013d60205260408120611b3090613bf3565b905060005b81518110156111e057611b63828281518110611b5357611b5361515a565b602002602001015160001961250f565b80611b6d81615170565b915050611b35565b610132548015611c8257600080611bdb61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f6000828254611bf291906150e6565b92505081905550806101306000828254611c0c91906150e6565b90915550839050611c25670de0b6b3a7640000846150f9565b611c2f9190615118565b6101316000828254611c4191906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000611c8c613643565b90506000805160206154bd83398151915281604051611cad91815260200190565b60405180910390a1610138546001600160a01b0316611d0a5760405162461bcd60e51b815260206004820152601960248201527843616e6e6f74207374616b65204162736f72626572526f647360381b6044820152606401610ee3565b60008311611d485760405162461bcd60e51b815260206004820152600b60248201526a0416d6f756e7420697320360ac1b6044820152606401610ee3565b33600090815261014060209081526040808320878452909152902054831115611db35760405162461bcd60e51b815260206004820152601760248201527f576974686472617720616d6f756e7420746f6f206269670000000000000000006044820152606401610ee3565b3360009081526101406020908152604080832087845290915281208054859290611dde9084906152c6565b9091555050336000908152610141602052604081208054859290611e039084906152c6565b909155505061013854600090611e23906001600160a01b03168686612e66565b3360009081526101426020526040812080549293508392909190611e489084906152c6565b90915550611e57905033613ea4565b6101385460408051602081018252600081529051637921219560e11b81526001600160a01b039092169163f242432a91611e9b91309133918b918b91600401615329565b600060405180830381600087803b158015611eb557600080fd5b505af1158015611ec9573d6000803e3d6000fd5b5050610138543360009081526101426020526040908190205490517f204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de009450611f2193506001600160a01b039092169189918991615363565b60405180910390a15050505050565b33600090815261013d60205260408120611f4990613bf3565b905060005b81518110156111e057611f7c828281518110611f6c57611f6c61515a565b6020026020010151600019613136565b5080611f8781615170565b915050611f4e565b33600090815261013d60205260408120611fa890613bf3565b905060005b81518110156111e057611fd8828281518110611fcb57611fcb61515a565b6020026020010151610be4565b80611fe281615170565b915050611fad565b600082815260976020526040812061158d9083613de1565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61203b62093a8060026150f9565b81565b6000805160206154dd83398151915261205681613c00565b5061013780546001600160a01b0319166001600160a01b0392909216919091179055565b610132548015612187576000806120e061012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f60008282546120f791906150e6565b9250508190555080610130600082825461211191906150e6565b9091555083905061212a670de0b6b3a7640000846150f9565b6121349190615118565b610131600082825461214691906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000612191613643565b90506000805160206154bd833981519152816040516121b291815260200190565b60405180910390a133600090815261013f602052604090206121d4908461409d565b6122145760405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081cdd185ad959607a1b6044820152606401610ee3565b61221d83611473565b1561223b5733600090815261013a60205260409020805460ff191690555b61013954600090612257906001600160a01b0316856001612e66565b336000908152610142602052604081208054929350839290919061227c9084906152c6565b9091555061228b905033613ea4565b610139546040516323b872dd60e01b8152306004820152336024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b1580156122de57600080fd5b505af11580156122f2573d6000803e3d6000fd5b5050610139543360009081526101426020526040908190205490517f204fccf0d92ed8d48f204adb39b2e81e92bad0dedb93f5716ca9478cfb57de00945061234b93506001600160a01b03909216918891600191615363565b60405180910390a150505050565b6000805160206154dd83398151915261237181613c00565b61013254801561247e576000806123d761012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f60008282546123ee91906150e6565b9250508190555080610130600082825461240891906150e6565b90915550839050612421670de0b6b3a7640000846150f9565b61242b9190615118565b610131600082825461243d91906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000612488613643565b90506000805160206154bd833981519152816040516124a991815260200190565b60405180910390a16124bd610135856140a9565b6125095760405162461bcd60e51b815260206004820152601760248201527f41646472657373206973206e6f74206578636c756465640000000000000000006044820152606401610ee3565b50505050565b6125198282613136565b506111e082610be4565b6000805160206154dd83398151915261253b81613c00565b610132548015612648576000806125a161012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f60008282546125b891906150e6565b925050819055508061013060008282546125d291906150e6565b909155508390506125eb670de0b6b3a7640000846150f9565b6125f59190615118565b610131600082825461260791906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000612652613643565b90506000805160206154bd8339815191528160405161267391815260200190565b60405180910390a1612687610135856140be565b6125095760405162461bcd60e51b815260206004820152601860248201527f4164647265737320616c7265616479206578636c7564656400000000000000006044820152606401610ee3565b6101325480156127e05760008061273961012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f600082825461275091906150e6565b9250508190555080610130600082825461276a91906150e6565b90915550839050612783670de0b6b3a7640000846150f9565b61278d9190615118565b610131600082825461279f91906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b60006127ea613643565b90506000805160206154bd8339815191528160405161280b91815260200190565b60405180910390a1610138546001600160a01b03166128685760405162461bcd60e51b815260206004820152601960248201527843616e6e6f74207374616b65204162736f72626572526f647360381b6044820152606401610ee3565b600083116128a65760405162461bcd60e51b815260206004820152600b60248201526a0416d6f756e7420697320360ac1b6044820152606401610ee3565b33600090815261014060209081526040808320878452909152812080548592906128d19084906150e6565b90915550503360009081526101416020526040812080548592906128f69084906150e6565b909155505033600090815261014160205260409020546014101561295c5760405162461bcd60e51b815260206004820152601e60248201527f4d6178203230206162736f72626572526f6473207065722077616c6c657400006044820152606401610ee3565b61013854600090612977906001600160a01b03168686612e66565b336000908152610142602052604081208054929350839290919061299c9084906150e6565b909155506129ab905033613ea4565b6101385460408051602081018252600081529051637921219560e11b81526001600160a01b039092169163f242432a916129ef91339130918b918b91600401615329565b600060405180830381600087803b158015612a0957600080fd5b505af1158015612a1d573d6000803e3d6000fd5b5050610138543360009081526101426020526040908190205490517fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed9450611f2193506001600160a01b039092169189918991615363565b610132548015612b8257600080612adb61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f6000828254612af291906150e6565b92505081905550806101306000828254612b0c91906150e6565b90915550839050612b25670de0b6b3a7640000846150f9565b612b2f9190615118565b6101316000828254612b4191906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000612b8c613643565b90506000805160206154bd83398151915281604051612bad91815260200190565b60405180910390a1610139546001600160a01b0316612c065760405162461bcd60e51b815260206004820152601560248201527410d85b9b9bdd081cdd185ad948105c9d1a599858dd605a1b6044820152606401610ee3565b33600090815261013f60205260409020612c2090846140d3565b612c615760405162461bcd60e51b815260206004820152601260248201527113919508185b1c9958591e481cdd185ad95960721b6044820152606401610ee3565b33600090815261013f60205260409020600390612c7d90613dd7565b1115612ccb5760405162461bcd60e51b815260206004820152601a60248201527f4d6178203320617274696661637473207065722077616c6c65740000000000006044820152606401610ee3565b612cd483611473565b15612d565733600090815261013a602052604090205460ff1615612d3a5760405162461bcd60e51b815260206004820152601d60248201527f4d6178203120312f31206172746966616374207065722077616c6c65740000006044820152606401610ee3565b33600090815261013a60205260409020805460ff191660011790555b61013954600090612d72906001600160a01b0316856001612e66565b3360009081526101426020526040812080549293508392909190612d979084906150e6565b90915550612da6905033613ea4565b610139546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015612df957600080fd5b505af1158015612e0d573d6000803e3d6000fd5b5050610139543360009081526101426020526040908190205490517fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed945061234b93506001600160a01b03909216918891600191615363565b610138546000906001600160a01b0390811690851603612e9057612e89826130fe565b905061158d565b610139546001600160a01b039081169085160361154c57610137546040516328225a8160e21b8152600481018590526001600160a01b039091169063a0896a04906024016040805180830381865afa925050508015612f0c575060408051601f3d908101601f19168201909252612f0991810190615189565b60015b612f9457612f186151ec565b806308c379a003612f415750612f2c615208565b80612f375750612f5a565b600091505061158d565b634e487b7103612f5a57612f53615292565b90612f3757505b3d808015612f84576040519150601f19603f3d011682016040523d82523d6000602084013e612f89565b606091505b50600091505061158d565b8051612fc1906001811115612fab57612fab614be0565b8260200151600481111561071257610712614be0565b91505061158d565b6000805160206154dd833981519152612fe181613c00565b81516110b29061013b90602085019061493c565b61203b62278d0060066150f9565b6000806000613010613643565b9050670429d069189e000081101561302b5760009250613097565b67058d15e17628000081101561305957600a6130488560056150f9565b6130529190615118565b9250613097565b6706f05b59d3b2000081101561307657600a6130488560066150f9565b670853a0d2313c000081101561309357600a6130488560086150f9565b8392505b6130a183856152c6565b915050915091565b61013b82815481106130ba57600080fd5b9060005260206000200181815481106130d257600080fd5b90600052602060002001600091509150505481565b6000818152609760205260408120610ae390613dd7565b6000610ae382662386f26fc100006150f9565b60008281526065602052604090206001015461312c81613c00565b6110b28383613db5565b6101325460009080156132465760008061319f61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f60008282546131b691906150e6565b925050819055508061013060008282546131d091906150e6565b909155508390506131e9670de0b6b3a7640000846150f9565b6131f39190615118565b610131600082825461320591906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b6000613250613643565b90506000805160206154bd8339815191528160405161327191815260200190565b60405180910390a133600090815261013c602090815260408083208884529091528120600181015490918190036132ad57600094505050613477565b808611156132b9578095505b61012e54600160a01b900460ff1661333b57816003015442101561331f5760405162461bcd60e51b815260206004820152601860248201527f506f736974696f6e206973207374696c6c206c6f636b656400000000000000006044820152606401610ee3565b600061332b33896140df565b905080871115613339578096505b505b600081613350670de0b6b3a7640000896150f9565b61335a9190615118565b90506000670de0b6b3a764000082856002015461337791906150f9565b6133819190615118565b905080610132600082825461339691906152c6565b925050819055508761013360008282546133b091906152c6565b92505081905550878460010160008282546133cb91906152c6565b92505081905550808460020160008282546133e691906152c6565b90915550506101315461340790670de0b6b3a764000090610d8d90846150f9565b84600501600082825461341a919061513a565b909155505061012d54613437906001600160a01b0316338a613d30565b604051888152899033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a360019650505050505b505092915050565b6000805160206154dd83398151915261349781613c00565b6101325480156135a4576000806134fd61012e60009054906101000a90046001600160a01b03166001600160a01b031663ae5c93576040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b915091508161012f600082825461351491906150e6565b9250508190555080610130600082825461352e91906150e6565b90915550839050613547670de0b6b3a7640000846150f9565b6135519190615118565b610131600082825461356391906150e6565b909155505061013154604080518481526020810184905280820186905260608101929092525160008051602061549d8339815191529181900360800190a150505b60006135ae613643565b90506000805160206154bd833981519152816040516135cf91815260200190565b60405180910390a16101308054600090915561012d546135f9906001600160a01b03168683613d30565b846001600160a01b03167f7c83d02a6ed4d6182087a0e243293e39c967dc6f12958ea7201d63214728d0f08260405161363491815260200190565b60405180910390a25050505050565b610134546000901561365757506101345490565b61012d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156136a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c691906150b7565b905060006136d5610135613dd7565b905060005b818110156137865761012d546001600160a01b03166370a0823161370061013584613de1565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015613744573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376891906150b7565b61377290846152c6565b92508061377e81615170565b9150506136da565b506101335461012d546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a0823190602401602060405180830381865afa1580156137d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fa91906150b7565b61380491906152c6565b905061381081846152c6565b9250821561383d5782670de0b6b3a76400006101335461383091906150f9565b61383a9190615118565b93505b50505090565b61203b62278d0060036150f9565b600054610100900460ff16158080156138715750600054600160ff909116105b8061388b5750303b15801561388b575060005460ff166001145b6138ee5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ee3565b6000805460ff191660011790558015613911576000805461ff0019166101001790555b61012d80546001600160a01b038086166001600160a01b03199283161790925561012e80549285169290911691909117905561395b6000805160206154dd8339815191528061411d565b6139736000805160206154dd83398151915233613d93565b60405180604001604052806040518060a001604052806753444835ec5800008152602001671bc16d674ec800008152602001670a688906bd8b00008152602001670de0b6b3a764000081526020016706f05b59d3b2000081525081526020016040518060a0016040528067058d15e17628000081526020016703782dace9d900008152602001670214e8348c4f0000815260200167016345785d8a0000815260200166b1a2bc2ec5000081525081525061013b906002613a34929190614995565b50613a3d614168565b613a45614168565b80156110b2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000805160206154dd833981519152613aa781613c00565b5061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03828116600090815261013c60209081526040808320858452909152808220610131546101325461012e54935163f6ed201760e01b815230600482015294959294919390928692613b47929091169063f6ed201790602401602060405180830381865afa158015610c4a573d6000803e3d6000fd5b50905081613b5d670de0b6b3a7640000836150f9565b613b679190615118565b613b7190846150e6565b92506000846005015490506000613b9a670de0b6b3a7640000868860020154610d8d91906150f9565b9050818112613bb357613bb0610db2838361513a565b96505b50505050505092915050565b6001600160a01b03163b151590565b60006001600160e01b03198216630271189760e51b1480610ae35750610ae3826141d3565b6060600061158d836141f8565b613c0a8133614254565b50565b60006001600160ff1b03821115613c775760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610ee3565b5090565b600080821215613c775760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610ee3565b6001600160a01b038216600090815261013d60205260409020613cf0908261409d565b6111e05760405162461bcd60e51b81526020600482015260116024820152706465706f7369744964202165786973747360781b6044820152606401610ee3565b6040516001600160a01b0383166024820152604481018290526110b290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526142b8565b613d9d828261438a565b60008281526097602052604090206110b290826140be565b613dbf8282614410565b60008281526097602052604090206110b290826140a9565b6000610ae3825490565b600061158d8383614477565b6001600160a01b038116600090815261013e6020526040812080548291908290613e1690615170565b91829055506001600160a01b038416600090815261013d60205260409020909150613e4190826140d3565b506001600160a01b03909216600090815261013c602090815260408083208584529091529020929050565b6040516001600160a01b03808516602483015283166044820152606481018290526125099085906323b872dd60e01b90608401613d5c565b6001600160a01b0381166000908152610142602090815260408083205461013d9092528220909190613ed590613bf3565b905060005b8151811015612509576000828281518110613ef757613ef761515a565b6020908102919091018101516001600160a01b038716600090815261013c8352604080822083835290935291822060068101549193509190613f3b9060ff166118bf565b5060018301549091506000670de0b6b3a7640000613f5989856150e6565b613f6390846150f9565b613f6d9190615118565b613f7790836150e6565b600285015490915080821115614004576000613f9382846152c6565b9050613fb0670de0b6b3a76400006101315483610d8d91906150f9565b866005016000828254613fc39190615389565b92505081905550806101326000828254613fdd91906150e6565b9250508190555080866002016000828254613ff891906150e6565b90915550614084915050565b8082101561408457600061401883836152c6565b9050614035670de0b6b3a76400006101315483610d8d91906150f9565b866005016000828254614048919061513a565b9250508190555080610132600082825461406291906152c6565b925050819055508086600201600082825461407d91906152c6565b9091555050505b505050505050808061409590615170565b915050613eda565b600061158d83836144a1565b600061158d836001600160a01b0384166144a1565b600061158d836001600160a01b03841661459b565b600061158d838361459b565b60006140eb83836119f4565b6001600160a01b03909316600090815261013c6020908152604080832094835293905291909120426004909101555090565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600054610100900460ff16610ef55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ee3565b60006001600160e01b03198216635a05180f60e01b1480610ae35750610ae3826145ea565b60608160000180548060200260200160405190810160405280929190818152602001828054801561424857602002820191906000526020600020905b815481526020019060010190808311614234575b50505050509050919050565b61425e8282612002565b6111e057614276816001600160a01b0316601461461f565b61428183602061461f565b6040516020016142929291906153a9565b60408051601f198184030181529082905262461bcd60e51b8252610ee39160040161541e565b600061430d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147bb9092919063ffffffff16565b8051909150156110b2578080602001905181019061432b9190615431565b6110b25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ee3565b6143948282612002565b6111e05760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556143cc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61441a8282612002565b156111e05760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600082600001828154811061448e5761448e61515a565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561458a5760006144c56001836152c6565b85549091506000906144d9906001906152c6565b905081811461453e5760008660000182815481106144f9576144f961515a565b906000526020600020015490508087600001848154811061451c5761451c61515a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061454f5761454f615453565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ae3565b6000915050610ae3565b5092915050565b60008181526001830160205260408120546145e257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ae3565b506000610ae3565b60006001600160e01b03198216637965db0b60e01b1480610ae357506301ffc9a760e01b6001600160e01b0319831614610ae3565b6060600061462e8360026150f9565b6146399060026150e6565b67ffffffffffffffff81111561465157614651614d76565b6040519080825280601f01601f19166020018201604052801561467b576020820181803683370190505b509050600360fc1b816000815181106146965761469661515a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106146c5576146c561515a565b60200101906001600160f81b031916908160001a90535060006146e98460026150f9565b6146f49060016150e6565b90505b600181111561476c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106147285761472861515a565b1a60f81b82828151811061473e5761473e61515a565b60200101906001600160f81b031916908160001a90535060049490941c9361476581615469565b90506146f7565b50831561158d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ee3565b60606147ca84846000856147d2565b949350505050565b6060824710156148335760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ee3565b6001600160a01b0385163b61488a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ee3565b600080866001600160a01b031685876040516148a69190615480565b60006040518083038185875af1925050503d80600081146148e3576040519150601f19603f3d011682016040523d82523d6000602084013e6148e8565b606091505b50915091506148f8828286614903565b979650505050505050565b6060831561491257508161158d565b8251156149225782518084602001fd5b8160405162461bcd60e51b8152600401610ee3919061541e565b828054828255906000526020600020908101928215614989579160200282015b8281111561498957825180516149799184916020909101906149dc565b509160200191906001019061495c565b50613c77929150614a23565b828054828255906000526020600020908101928215614989579160200282015b828111156149895782516149cc90839060056149dc565b50916020019190600101906149b5565b828054828255906000526020600020908101928215614a17579160200282015b82811115614a175782518255916020019190600101906149fc565b50613c77929150614a40565b80821115613c77576000614a378282614a55565b50600101614a23565b5b80821115613c775760008155600101614a41565b5080546000825590600052602060002090810190613c0a9190614a40565b600060208284031215614a8557600080fd5b81356001600160e01b03198116811461158d57600080fd5b80356001600160a01b038116811461116157600080fd5b600060208284031215614ac657600080fd5b61158d82614a9d565b6020808252825182820181905260009190848201906040850190845b81811015614b0757835183529284019291840191600101614aeb565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b83811015614b8f57888603603f19018552825180518088529088019088880190845b81811015614b795783518352928a0192918a0191600101614b5d565b5090975050509386019391860191600101614b3b565b509398975050505050505050565b60008060408385031215614bb057600080fd5b614bb983614a9d565b946020939093013593505050565b600060208284031215614bd957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60058110614c1457634e487b7160e01b600052602160045260246000fd5b9052565b600060e0820190508882528760208301528660408301528560608301528460808301528360a0830152614c4e60c0830184614bf6565b98975050505050505050565b60008060408385031215614c6d57600080fd5b82359150614c7d60208401614a9d565b90509250929050565b60058110613c0a57600080fd5b600060208284031215614ca557600080fd5b813561158d81614c86565b60008060408385031215614cc357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015614b075783516001600160a01b031683529284019291840191600101614cee565b60008060408385031215614d2657600080fd5b823591506020830135614d3881614c86565b809150509250929050565b600080600060608486031215614d5857600080fd5b614d6184614a9d565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614db257614db2614d76565b6040525050565b600067ffffffffffffffff821115614dd357614dd3614d76565b5060051b60200190565b600082601f830112614dee57600080fd5b81356020614dfb82614db9565b604051614e088282614d8c565b83815260059390931b8501820192828101915086841115614e2857600080fd5b8286015b84811015614e435780358352918301918301614e2c565b509695505050505050565b60006020808385031215614e6157600080fd5b823567ffffffffffffffff80821115614e7957600080fd5b818501915085601f830112614e8d57600080fd5b8135614e9881614db9565b604051614ea58282614d8c565b82815260059290921b8401850191858101915088831115614ec557600080fd5b8585015b83811015614efd57803585811115614ee15760008081fd5b614eef8b89838a0101614ddd565b845250918601918601614ec9565b5098975050505050505050565b600082601f830112614f1b57600080fd5b813567ffffffffffffffff811115614f3557614f35614d76565b604051614f4c601f8301601f191660200182614d8c565b818152846020838601011115614f6157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614f9657600080fd5b614f9f86614a9d565b9450614fad60208701614a9d565b9350604086013567ffffffffffffffff80821115614fca57600080fd5b614fd689838a01614ddd565b94506060880135915080821115614fec57600080fd5b614ff889838a01614ddd565b9350608088013591508082111561500e57600080fd5b5061501b88828901614f0a565b9150509295509295909350565b6000806040838503121561503b57600080fd5b61504483614a9d565b9150614c7d60208401614a9d565b600080600080600060a0868803121561506a57600080fd5b61507386614a9d565b945061508160208701614a9d565b93506040860135925060608601359150608086013567ffffffffffffffff8111156150ab57600080fd5b61501b88828901614f0a565b6000602082840312156150c957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ae357610ae36150d0565b6000816000190483118215151615615113576151136150d0565b500290565b60008261513557634e487b7160e01b600052601260045260246000fd5b500490565b8181036000831280158383131683831282161715614594576145946150d0565b634e487b7160e01b600052603260045260246000fd5b600060018201615182576151826150d0565b5060010190565b60006040828403121561519b57600080fd5b6040516040810181811067ffffffffffffffff821117156151be576151be614d76565b6040528251600281106151d057600080fd5b815260208301516151e081614c86565b60208201529392505050565b600060033d11156152055760046000803e5060005160e01c5b90565b600060443d10156152165790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561524657505050505090565b828501915081518181111561525e5750505050505090565b843d87010160208285010111156152785750505050505090565b61528760208286010187614d8c565b509095945050505050565b60008060233d11156152ae576020600460003e50506000516001905b9091565b8281526040810161158d6020830184614bf6565b81810381811115610ae357610ae36150d0565b60005b838110156152f45781810151838201526020016152dc565b50506000910152565b600081518084526153158160208601602086016152d9565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906148f8908301846152fd565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b8082018281126000831280158216821582161715613477576134776150d0565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516153e18160178501602088016152d9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516154128160288401602088016152d9565b01602801949350505050565b60208152600061158d60208301846152fd565b60006020828403121561544357600080fd5b8151801515811461158d57600080fd5b634e487b7160e01b600052603160045260246000fd5b600081615478576154786150d0565b506000190190565b600082516154928184602087016152d9565b919091019291505056fe51ba001b2556bfc97b1ed73ece5dee29b5c284d8435120c957515cf11017f000163eacd81cbfca2d1ec176759e7107e34229c5cbc5ec0b3fde68ffdef1157e025199402c8bed06f2396e145fcd5fb5c3e7f91cd824966ba06598d38ae20b09f2a2646970667358221220f7b5c7b76b68fba57853347a14e9f66ebf0f4a4e6d1f4f5526292d4c1f28630564736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accEssencePerEpShare()": {
        "notice": "EP stands for ESSENCE POWER, representing the multiplier over the ESSENCE a user has, and thus their share of emissions this represents the amount of essence per ESSENCE POWER token shares that exist Having high EP enables a user to gain a greater share of emissions but does not increase the rate of ESSENCE emissions for the game."
      },
      "currentId(address)": {
        "notice": "user => deposit index"
      },
      "pendingRewardsPosition(address,uint256)": {
        "notice": "essenceField.getPendingRewards: calculates the rewards still available to this absorber from the stream that was enabled getRealEssenceRewards, strangulates the stream by a % according to the utilization of this absorber"
      },
      "performanceBoost()": {
        "notice": "This function could do a chainlink request to obtain the person's social score from off-chain The score enters in the power equation of the user to calculate new EP (_recalculateEPAmount) If the update is done in a pull fashion, it is up to the user to call the function whenever he sees a surplus in reward from doing it (frontend could compute cost of update). It could also be called whenever the user deposits/harvests/withdraws/stakesNFTs If done in push fashion, system has to provide an ordered array of user addresses and Ids to update the power and _recalculate the EP amount. This involves a lot of gas costs and storage updates, but in a rollup could be doable."
      },
      "toggleUnlockAll()": {
        "notice": "EMERGENCY ONLY"
      },
      "totalEpToken()": {
        "notice": "this represents the total amount of EP Shares that exist"
      },
      "userInfo(address,uint256)": {
        "notice": "user => depositId => UserInfo"
      },
      "utilization()": {
        "notice": "how this function calculates the utilization % of this absorber"
      }
    },
    "notice": "Contract is using an admin role to manage its configuration. Admin role is assigned to a multi-sig wallet controlled by trusted team members. Admin role aka FACTION_ABSORBER_ADMIN_ROLE, as initialized during init() to msg.sender can: • Add/Remove addresses to excludedAddresses, which impacts the utilization calculation, by calling   addExcludedAddress() and removeExcludedAddress(), respectively. • Set/Unset an arbitrary override value for the value returned by utilization(), by calling   setUtilizationOverride(). • Change at any time the essence token address, which is set during init(), to an arbitrary one, by calling   setEssenceToken(). • Set absorberRods to an arbitrary address (including address(0), in which case absorberRods staking/unstaking is   disabled), by calling setAbsorberRods(). • Set artifact to an arbitrary address (including address(0), in which case artifact staking/unstaking is disabled),   by calling setArtifact(). • Set artifactMetadataStore to an arbitrary address (used for artifact 1:1 checking and artifact nft power computation),   by calling setArtifactMetadataStore(). • Re-set the artifactPowerTable array to arbitrary values, by calling setArtifactPowerTable(). • Set/Unset the emergency unlockAll state, by calling toggleUnlockAll(). • Withdraw all undistributed rewards to an arbitrary address, by calling withdrawUndistributedRewards().",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 838,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 841,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2065,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2335,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 433,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)428_storage)"
      },
      {
        "astId": 732,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 282,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4511_storage)"
      },
      {
        "astId": 392,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1269,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1215,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14694,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "essence",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20Upgradeable)1348"
      },
      {
        "astId": 14697,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "essenceField",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IEssenceField)12371"
      },
      {
        "astId": 14699,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "unlockAll",
        "offset": 20,
        "slot": "302",
        "type": "t_bool"
      },
      {
        "astId": 14701,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "totalRewardsEarned",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 14703,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "totalUndistributedRewards",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 14706,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "accEssencePerEpShare",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 14709,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "totalEpToken",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 14711,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "essenceTotalDeposits",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 14713,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "utilizationOverride",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 14716,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "excludedAddresses",
        "offset": 0,
        "slot": "309",
        "type": "t_struct(AddressSet)4511_storage"
      },
      {
        "astId": 14718,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "artifactMetadataStore",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      },
      {
        "astId": 14720,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "absorberRods",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 14722,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "artifact",
        "offset": 0,
        "slot": "313",
        "type": "t_address"
      },
      {
        "astId": 14726,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "isArtifact1_1Staked",
        "offset": 0,
        "slot": "314",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14730,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "artifactPowerTable",
        "offset": 0,
        "slot": "315",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 14738,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "316",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)14656_storage))"
      },
      {
        "astId": 14744,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "allUserDepositIds",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_address,t_struct(UintSet)4668_storage)"
      },
      {
        "astId": 14749,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "currentId",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14754,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "artifactStaked",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_address,t_struct(UintSet)4668_storage)"
      },
      {
        "astId": 14760,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "absorberRodsStaked",
        "offset": 0,
        "slot": "320",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 14764,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "absorberRodsStakedAmount",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14768,
        "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
        "label": "powers",
        "offset": 0,
        "slot": "322",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)1348": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IEssenceField)12371": {
        "encoding": "inplace",
        "label": "contract IEssenceField",
        "numberOfBytes": "20"
      },
      "t_enum(Lock)14640": {
        "encoding": "inplace",
        "label": "enum EssenceAbsorberV2.Lock",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserInfo)14656_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct EssenceAbsorberV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserInfo)14656_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)4668_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)4668_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4511_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4511_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)428_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)428_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)14656_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EssenceAbsorberV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)14656_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4511_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4510,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4210_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)428_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 425,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 427,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4210_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4205,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4209,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)4668_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 4667,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4210_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)14656_storage": {
        "encoding": "inplace",
        "label": "struct EssenceAbsorberV2.UserInfo",
        "members": [
          {
            "astId": 14642,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "originalDepositAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14644,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "depositAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14646,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "epAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14648,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14650,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "vestingLastUpdate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14652,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 14655,
            "contract": "contracts/modules/EssenceAbsorberV2.sol:EssenceAbsorberV2",
            "label": "lock",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Lock)14640"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}