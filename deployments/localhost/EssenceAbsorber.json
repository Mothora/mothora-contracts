{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MothoraGame",
          "name": "_mothoraGame",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochRewardsPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mothoraGameContractAddress",
          "type": "address"
        }
      ],
      "name": "MothoraGameAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RewardsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "autocompound",
          "type": "bool"
        }
      ],
      "name": "claimEpochRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "contributeArtifacts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "precision",
          "type": "uint256"
        }
      ],
      "name": "divider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochRewardsPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "factionPartsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_faction",
          "type": "uint256"
        }
      ],
      "name": "getFactionVaultPartsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "factionVaultPartsBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMothoraGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getPlayerVaultPartsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playerVaultPartsBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getTotalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDistributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerStakedPartsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mothoraGameContractAddress",
          "type": "address"
        }
      ],
      "name": "setMothoraGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedESSBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "timeTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVaultPartsContributed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dde15c6bb434abe133a28de181db0ab5e6f16de091d6b72230eb0fd8ae9475e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "2346144",
    "logsBloom": "0x
    "blockHash": "0xd282ec28601d705791508acf1a069a829674296a0498751c4916ea5dcef0cb2d",
    "transactionHash": "0x2dde15c6bb434abe133a28de181db0ab5e6f16de091d6b72230eb0fd8ae9475e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0x2dde15c6bb434abe133a28de181db0ab5e6f16de091d6b72230eb0fd8ae9475e",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd282ec28601d705791508acf1a069a829674296a0498751c4916ea5dcef0cb2d"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "2346144",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    15,
    600
  ],
  "numDeployments": 1,
  "solcInputHash": "a8ecd0cd184449efbcab2f28aa23e473",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MothoraGame\",\"name\":\"_mothoraGame\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochRewardsPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mothoraGameContractAddress\",\"type\":\"address\"}],\"name\":\"MothoraGameAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autocompound\",\"type\":\"bool\"}],\"name\":\"claimEpochRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contributeArtifacts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochRewardsPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factionPartsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faction\",\"type\":\"uint256\"}],\"name\":\"getFactionVaultPartsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"factionVaultPartsBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMothoraGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerVaultPartsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playerVaultPartsBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerStakedPartsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mothoraGameContractAddress\",\"type\":\"address\"}],\"name\":\"setMothoraGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedESSBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVaultPartsContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMothoraGame()\":{\"details\":\"Returns the address of the Mothora Game Hub Contract\",\"returns\":{\"_0\":\"The Mothora Game address*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMothoraGame(address)\":{\"details\":\"Updates the address of the Mothora Game\",\"params\":{\"mothoraGameContractAddress\":\"The new Mothora Game address*\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/EssenceAbsorber.sol\":\"EssenceAbsorber\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8defa7c9cc7cc4eb529daff535eff833f76a4cb424f85a08524eeea15e071a55\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MothoraGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {Cosmetics} from \\\"./modules/Cosmetics.sol\\\";\\n\\ncontract MothoraGame is Initializable, AccessControlEnumerableUpgradeable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter public accountsCounter;\\n\\n    enum Faction {\\n        NONE,\\n        THOROKS,\\n        CONGLOMERATE,\\n        DOC\\n    }\\n    uint256[4] public totalFactionMembers;\\n\\n    struct Account {\\n        uint256 id;\\n        bool frozen;\\n        Faction faction;\\n    }\\n    bytes32 public constant MOTHORA_GAME_MASTER = keccak256(\\\"MOTHORA_GAME_MASTER\\\");\\n\\n    // Player address => Struct Account\\n    mapping(address => Account) private playerAccounts;\\n\\n    // Bytes32 id => contract Address\\n    mapping(bytes32 => address) private gameProtocolAddresses;\\n\\n    bytes32 private constant ARENA = \\\"ARENA\\\";\\n    bytes32 private constant ARTIFACTS = \\\"ARTIFACTS\\\";\\n    bytes32 private constant COSMETICS = \\\"COSMETICS\\\";\\n    bytes32 private constant CRAFTING = \\\"CRAFTING\\\";\\n    bytes32 private constant ESSENCE = \\\"ESSENCE\\\";\\n    bytes32 private constant ESSENCE_FIELD = \\\"ESSENCE_FIELD\\\";\\n    bytes32 private constant ESSENCE_ABSORBER = \\\"ESSENCE_ABSORBER\\\";\\n\\n    event AccountCreated(address indexed player, uint256 id);\\n    event AccountFrozen(address indexed player);\\n    event ArenaModuleUpdated(address indexed arenaModule);\\n    event EssenceFieldUpdated(address indexed essenceField);\\n    event EssenceAbsorberUpdated(address indexed essenceAbsorber);\\n    event EssenceUpdated(address indexed essence);\\n    event CraftingModuleUpdated(address indexed craftingModule);\\n    event CosmeticsModuleUpdated(address indexed cosmetics);\\n    event ArtifactsModuleUpdated(address indexed artifacts);\\n\\n    modifier activeAccounts() {\\n        uint256 id = getPlayerId(msg.sender);\\n        bool frozen = getPlayerStatus(msg.sender);\\n        require(id != 0 && !frozen, \\\"ACCOUNT_NOT_ACTIVE\\\");\\n        _;\\n    }\\n\\n    function init() external initializer {\\n        _setRoleAdmin(MOTHORA_GAME_MASTER, MOTHORA_GAME_MASTER);\\n        _grantRole(MOTHORA_GAME_MASTER, msg.sender);\\n        __AccessControlEnumerable_init();\\n    }\\n\\n    /**\\n     * @dev Creates an account for a player\\n     * @param faction The selected faction id\\n     **/\\n    function createAccount(uint256 faction) external {\\n        _joinFaction(faction);\\n\\n        // currently using a contract id system\\n        // would be changed to Unreal Engine id system\\n        accountsCounter.increment();\\n\\n        uint256 playerId = accountsCounter.current();\\n        playerAccounts[msg.sender].id = playerId;\\n\\n        _mintCharacterCosmeticSkin();\\n\\n        emit AccountCreated(msg.sender, playerId);\\n    }\\n\\n    /**\\n     * @dev Freezes an account for a player\\n     * @param player The address of the player whose account is being frozen\\n     **/\\n    function freezeAccount(address player) public onlyRole(MOTHORA_GAME_MASTER) {\\n        require(playerAccounts[player].id != 0, \\\"ACCOUNT_DOES_NOT_EXIST\\\");\\n        require(!playerAccounts[player].frozen, \\\"ACCOUNT_ALREADY_FROZEN\\\");\\n\\n        playerAccounts[player].frozen = true;\\n        emit AccountFrozen(player);\\n    }\\n\\n    function defect(uint256 newFaction) external activeAccounts {\\n        require(newFaction == 1 || newFaction == 2 || newFaction == 3, \\\"INVALID_FACTION_SELECTED\\\");\\n        uint256 currentfaction = getPlayerFaction(msg.sender);\\n        require(newFaction != currentfaction, \\\"CANNOT_DEFECT_TO_SAME_FACTION\\\");\\n\\n        totalFactionMembers[currentfaction] -= 1;\\n\\n        if (newFaction == 1 && currentfaction != 1) {\\n            playerAccounts[msg.sender].faction = Faction.THOROKS;\\n            totalFactionMembers[1] += 1;\\n        } else if (newFaction == 2 && currentfaction != 2) {\\n            playerAccounts[msg.sender].faction = Faction.CONGLOMERATE;\\n            totalFactionMembers[2] += 1;\\n        } else if (newFaction == 3 && currentfaction != 3) {\\n            playerAccounts[msg.sender].faction = Faction.DOC;\\n            totalFactionMembers[3] += 1;\\n        }\\n        // TODO restake or unstake Artifacts according to what the player desires\\n    }\\n\\n    /**\\n     * @dev Returns a player's id\\n     * @return Players'id\\n     */\\n    function getPlayerId(address player) public view returns (uint256) {\\n        return (playerAccounts[player].id);\\n    }\\n\\n    /**\\n     * @dev Returns a player's faction\\n     * @return Faction code\\n     */\\n    function getPlayerFaction(address player) public view returns (uint256) {\\n        return (uint256(playerAccounts[player].faction));\\n    }\\n\\n    /**\\n     * @dev Returns a player's status\\n     * @return Frozen status\\n     */\\n    function getPlayerStatus(address player) public view returns (bool) {\\n        return playerAccounts[player].frozen;\\n    }\\n\\n    /**\\n     * @dev Returns an address by id\\n     * @return The address\\n     */\\n    function getAddress(bytes32 id) public view returns (address) {\\n        return gameProtocolAddresses[id];\\n    }\\n\\n    /**\\n     * @dev Returns the address of the ARENA\\n     * @return The ARENA address\\n     **/\\n    function getArena() public view returns (address) {\\n        return getAddress(ARENA);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the ARENA\\n     * @param arenaModule The new ARENA address\\n     **/\\n    function setArena(address arenaModule) external onlyRole(MOTHORA_GAME_MASTER) {\\n        gameProtocolAddresses[ARENA] = arenaModule;\\n        emit ArenaModuleUpdated(arenaModule);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the ESSENCE_FIELD\\n     * @return The ESSENCE_FIELD address\\n     **/\\n    function getEssenceField() public view returns (address) {\\n        return getAddress(ESSENCE_FIELD);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the ESSENCE_FIELD\\n     * @param essenceField The new ESSENCE_FIELD address\\n     **/\\n    function setEssenceField(address essenceField) external onlyRole(MOTHORA_GAME_MASTER) {\\n        gameProtocolAddresses[ESSENCE_FIELD] = essenceField;\\n        emit EssenceFieldUpdated(essenceField);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the ESSENCE_ABSORBER\\n     * @return The ESSENCE_ABSORBER address\\n     **/\\n    function getEssenceAbsorber() public view returns (address) {\\n        return getAddress(ESSENCE_ABSORBER);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the ESSENCE_ABSORBER\\n     * @param essenceAbsorber The new ESSENCE_ABSORBER address\\n     **/\\n    function setEssenceAbsorber(address essenceAbsorber) external onlyRole(MOTHORA_GAME_MASTER) {\\n        gameProtocolAddresses[ESSENCE_ABSORBER] = essenceAbsorber;\\n        emit EssenceAbsorberUpdated(essenceAbsorber);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the ESSENCE\\n     * @return The ESSENCE address\\n     **/\\n    function getEssence() public view returns (address) {\\n        return getAddress(ESSENCE);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the ESSENCE\\n     * @param essence The new ESSENCE address\\n     **/\\n    function setEssence(address essence) external onlyRole(MOTHORA_GAME_MASTER) {\\n        gameProtocolAddresses[ESSENCE] = essence;\\n        emit EssenceUpdated(essence);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the CRAFTING\\n     * @return The CRAFTING address\\n     **/\\n    function getCrafting() public view returns (address) {\\n        return getAddress(CRAFTING);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the CRAFTING\\n     * @param crafting The new CRAFTING address\\n     **/\\n    function setCrafting(address crafting) external onlyRole(MOTHORA_GAME_MASTER) {\\n        gameProtocolAddresses[CRAFTING] = crafting;\\n        emit CraftingModuleUpdated(crafting);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the COSMETICS\\n     * @return The COSMETICS address\\n     **/\\n    function getCosmetics() public view returns (address) {\\n        return getAddress(COSMETICS);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the COSMETICS\\n     * @param cosmetics The new COSMETICS address\\n     **/\\n    function setCosmetics(address cosmetics) external onlyRole(MOTHORA_GAME_MASTER) {\\n        gameProtocolAddresses[COSMETICS] = cosmetics;\\n        emit CosmeticsModuleUpdated(cosmetics);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the ARTIFACTS\\n     * @return The ARTIFACTS address\\n     **/\\n    function getArtifacts() public view returns (address) {\\n        return getAddress(ARTIFACTS);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the ARTIFACTS\\n     * @param artifacts The new ARTIFACTS address\\n     **/\\n    function setArtifacts(address artifacts) external onlyRole(MOTHORA_GAME_MASTER) {\\n        gameProtocolAddresses[ARTIFACTS] = artifacts;\\n        emit ArtifactsModuleUpdated(artifacts);\\n    }\\n\\n    /**\\n     * @dev Assigns a faction id to an account\\n     **/\\n    function _joinFaction(uint256 faction) internal {\\n        require(playerAccounts[msg.sender].faction == Faction.NONE, \\\"PLAYER_ALREADY_HAS_FACTION\\\");\\n        require(faction == 1 || faction == 2 || faction == 3, \\\"INVALID_FACTION\\\");\\n        if (faction == 1) {\\n            playerAccounts[msg.sender].faction = Faction.THOROKS;\\n            totalFactionMembers[1] += 1;\\n        } else if (faction == 2) {\\n            playerAccounts[msg.sender].faction = Faction.CONGLOMERATE;\\n            totalFactionMembers[2] += 1;\\n        } else if (faction == 3) {\\n            playerAccounts[msg.sender].faction = Faction.DOC;\\n            totalFactionMembers[3] += 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints a faction related cosmetic skin\\n     **/\\n    function _mintCharacterCosmeticSkin() internal {\\n        require(playerAccounts[msg.sender].faction != Faction.NONE, \\\"PLAYER_HAS_NO_FACTION\\\");\\n        uint256 faction = uint256(playerAccounts[msg.sender].faction);\\n        require(Cosmetics(getCosmetics()).balanceOf(msg.sender, faction) == 0, \\\"ONLY_ONE_SKIN_PER_FACTION\\\");\\n        Cosmetics(getCosmetics()).mintCharacter(msg.sender, faction);\\n    }\\n}\\n\",\"keccak256\":\"0x852d67daa277b20e14b919b7af4e2358afe5daf7eee2115e96fa7cbc27f5b02c\",\"license\":\"MIT\"},\"contracts/modules/Artifacts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {MothoraGame} from \\\"../MothoraGame.sol\\\";\\n\\ncontract Artifacts is ERC1155, Ownable {\\n    event MothoraGameAddressUpdated(address indexed mothoraGameContractAddress);\\n    //===============Storage===============\\n\\n    mapping(uint256 => string) private _uris;\\n\\n    uint256 public constant ARTIFACTS = 0;\\n    uint256 public constant THOROKS = 1;\\n    uint256 public constant CONGLOMERATE = 2;\\n    uint256 public constant DOC = 3;\\n\\n    MothoraGame mothoraGameContract;\\n\\n    modifier onlyArena() {\\n        require(msg.sender == mothoraGameContract.getArena(), \\\"NOT_ARENA\\\");\\n        _;\\n    }\\n    modifier onlyCrafting() {\\n        require(msg.sender == mothoraGameContract.getCrafting(), \\\"NOT_CRAFTING\\\");\\n        _;\\n    }\\n\\n    modifier onlyArenaOrCrafting() {\\n        require(\\n            msg.sender == mothoraGameContract.getCrafting() || msg.sender == mothoraGameContract.getArena(),\\n            \\\"NOT_CRAFTING_OR_ARENA\\\"\\n        );\\n        _;\\n    }\\n\\n    //===============Functions=============\\n\\n    // To translate CIDv0 (Qm) to CIDv1 (ba) use this website: https://cid.ipfs.io/\\n    // constructor() ERC1155(\\\"https://bafybeiex2io5lawckt4bgjjyhmvfy7yk72s4fmhuxj2rgehwzaa6lderkm.ipfs.dweb.link/{id}.json\\\") {}\\n\\n    constructor(string memory _initialFolder, address _mothoraGameAddress)\\n        ERC1155(string(abi.encodePacked(_initialFolder, \\\"{id}.json\\\")))\\n    {\\n        setTokenUri(ARTIFACTS, string(abi.encodePacked(_initialFolder, \\\"0\\\", \\\".json\\\")));\\n        mothoraGameContract = MothoraGame(_mothoraGameAddress);\\n    }\\n\\n    function mintArtifacts(address recipient, uint256 amount) external onlyArenaOrCrafting {\\n        _mint(recipient, ARTIFACTS, amount, \\\"\\\");\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return (_uris[tokenId]);\\n    }\\n\\n    function setTokenUri(uint256 tokenId, string memory NFTuri) public onlyOwner {\\n        require(bytes(_uris[tokenId]).length == 0, \\\"CANNOT_SET_URI_TWICE\\\");\\n        _uris[tokenId] = NFTuri;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Mothora Game Hub Contract\\n     * @return The Mothora Game address\\n     **/\\n    function getMothoraGame() public view returns (address) {\\n        return address(mothoraGameContract);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the Mothora Game\\n     * @param mothoraGameContractAddress The new Mothora Game address\\n     **/\\n    function setMothoraGame(address mothoraGameContractAddress) external onlyOwner {\\n        mothoraGameContract = MothoraGame(mothoraGameContractAddress);\\n        emit MothoraGameAddressUpdated(mothoraGameContractAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x570fd1aeb621a900b0440d092d9b18354f0e1ca4ca8591027498f84c7e64f9a6\",\"license\":\"MIT\"},\"contracts/modules/Cosmetics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {MothoraGame} from \\\"../MothoraGame.sol\\\";\\n\\ncontract Cosmetics is ERC1155, Ownable {\\n    event MothoraGameAddressUpdated(address indexed mothoraGameContractAddress);\\n\\n    //===============Storage===============\\n\\n    mapping(uint256 => string) private _uris;\\n\\n    uint256 public constant THOROKS = 1;\\n    uint256 public constant CONGLOMERATE = 2;\\n    uint256 public constant DOC = 3;\\n\\n    MothoraGame mothoraGameContract;\\n\\n    modifier onlyMothoraGame() {\\n        require(msg.sender == address(mothoraGameContract), \\\"NOT_MOTHORA_GAME\\\");\\n        _;\\n    }\\n\\n    //===============Functions=============\\n\\n    // To translate CIDv0 (Qm) to CIDv1 (ba) use this website: https://cid.ipfs.io/\\n    // constructor() ERC1155(\\\"https://bafybeiex2io5lawckt4bgjjyhmvfy7yk72s4fmhuxj2rgehwzaa6lderkm.ipfs.dweb.link/{id}.json\\\") {}\\n    // currently all characters of the same faction have the same skin\\n\\n    constructor(string memory _initialFolder, address _mothoraGameAddress)\\n        ERC1155(string(abi.encodePacked(_initialFolder, \\\"{id}.json\\\")))\\n    {\\n        setTokenUri(THOROKS, string(abi.encodePacked(_initialFolder, \\\"1\\\", \\\".json\\\")));\\n        setTokenUri(CONGLOMERATE, string(abi.encodePacked(_initialFolder, \\\"2\\\", \\\".json\\\")));\\n        setTokenUri(DOC, string(abi.encodePacked(_initialFolder, \\\"3\\\", \\\".json\\\")));\\n        mothoraGameContract = MothoraGame(_mothoraGameAddress);\\n    }\\n\\n    function mintCharacter(address _recipient, uint256 _id) external onlyMothoraGame {\\n        require(_id == THOROKS || _id == CONGLOMERATE || _id == DOC, \\\"WRONG_ID\\\");\\n        _mint(_recipient, _id, 1, \\\"\\\");\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return (_uris[tokenId]);\\n    }\\n\\n    function setTokenUri(uint256 tokenId, string memory NFTuri) public onlyOwner {\\n        require(bytes(_uris[tokenId]).length == 0, \\\"CANNOT_SET_URI_TWICE\\\");\\n        _uris[tokenId] = NFTuri;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Mothora Game Hub Contract\\n     * @return The Mothora Game address\\n     **/\\n    function getMothoraGame() public view returns (address) {\\n        return address(mothoraGameContract);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the Mothora Game\\n     * @param mothoraGameContractAddress The new Mothora Game address\\n     **/\\n    function setMothoraGame(address mothoraGameContractAddress) external onlyOwner {\\n        mothoraGameContract = MothoraGame(mothoraGameContractAddress);\\n        emit MothoraGameAddressUpdated(mothoraGameContractAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xfe711e9c234ed6cc0875cb3b8103eb7792b288aa3d4591b2a49848f45a0d1af7\",\"license\":\"MIT\"},\"contracts/modules/EssenceAbsorber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {MothoraGame} from \\\"../MothoraGame.sol\\\";\\nimport {Artifacts} from \\\"./Artifacts.sol\\\";\\n\\ncontract EssenceAbsorber is Ownable, ReentrancyGuard, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    event MothoraGameAddressUpdated(address indexed mothoraGameContractAddress);\\n\\n    //============== STORAGE ==============\\n\\n    mapping(address => uint256) public stakedESSBalance;\\n    mapping(address => uint256) public RewardsBalance;\\n    mapping(address => uint256) public playerIds;\\n\\n    mapping(address => uint256) public stakedDuration;\\n    mapping(address => uint256) public lastUpdate;\\n    mapping(address => uint256) public timeTier;\\n\\n    mapping(address => uint256) public playerStakedPartsBalance;\\n    mapping(uint256 => uint256) public factionPartsBalance;\\n\\n    MothoraGame mothoraGameContract;\\n\\n    // Rewards Function variables\\n    uint256 public totalStakedBalance;\\n    uint256 public epochRewards;\\n    uint256 public totalVaultPartsContributed;\\n    uint256 public lastDistributionTime;\\n    uint256 public epochRewardsPercentage;\\n    uint256 public epochDuration;\\n    uint256 public epochStartTime;\\n    address[] public playerAddresses;\\n    uint256 public playerId;\\n\\n    //============== CONSTRUCTOR ============\\n\\n    constructor(\\n        MothoraGame _mothoraGame,\\n        uint256 _epochRewardsPercentage,\\n        uint256 _epochDuration\\n    ) {\\n        mothoraGameContract = _mothoraGame;\\n        epochRewardsPercentage = _epochRewardsPercentage;\\n        epochDuration = _epochDuration;\\n        epochStartTime = block.timestamp;\\n    }\\n\\n    modifier activeAccounts() {\\n        uint256 id = mothoraGameContract.getPlayerId(msg.sender);\\n        bool frozen = mothoraGameContract.getPlayerStatus(msg.sender);\\n        require(id != 0 && !frozen, \\\"ACCOUNT_NOT_ACTIVE\\\");\\n        _;\\n    }\\n\\n    //============== FUNCTIONS =============\\n\\n    function stakeTokens(uint256 _amount) public nonReentrant activeAccounts {\\n        require(_amount > 0, \\\"Amount must be more than 0.\\\");\\n        IERC20(mothoraGameContract.getEssence()).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        _stakeTokens(_amount);\\n    }\\n\\n    function unstakeTokens(uint256 _amount) external nonReentrant activeAccounts {\\n        require(_amount > 0, \\\"Amount must be more than 0.\\\");\\n        require(stakedESSBalance[msg.sender] > 0, \\\"Staking balance cannot be 0\\\");\\n        require(_amount <= stakedESSBalance[msg.sender], \\\"Cannot unstake more than your staked balance\\\");\\n\\n        stakedESSBalance[msg.sender] -= _amount;\\n        totalStakedBalance -= _amount;\\n    }\\n\\n    function contributeArtifacts(uint256 _amount) external nonReentrant activeAccounts {\\n        require(_amount > 0, \\\"Amount must be more than 0\\\");\\n        Artifacts artifactsContract = Artifacts(mothoraGameContract.getArtifacts());\\n        require(\\n            artifactsContract.balanceOf(msg.sender, artifactsContract.ARTIFACTS()) >= _amount,\\n            \\\"The Player does not have enough Artifacts\\\"\\n        );\\n\\n        playerStakedPartsBalance[msg.sender] += _amount;\\n        uint256 faction = mothoraGameContract.getPlayerFaction(msg.sender);\\n\\n        factionPartsBalance[faction] += _amount;\\n        totalVaultPartsContributed += _amount;\\n\\n        // Transfer from player to Staking Contract\\n        artifactsContract.safeTransferFrom(msg.sender, address(this), 0, _amount, \\\"\\\");\\n    }\\n\\n    function unsafeInc(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n\\n    function distributeRewards() external onlyOwner {\\n        require(totalStakedBalance > 0, \\\"There are no tokens staked\\\");\\n        uint256 lastEpochTime = epochStartTime + epochDuration * (((block.timestamp - epochStartTime) / epochDuration));\\n        require(lastDistributionTime < lastEpochTime, \\\"The player has already claimed in this epoch\\\");\\n        // total staked balance * APR percentage * 10min/1 year -> rewards in a given epoch of 10 minute\\n        epochRewards = divider(totalStakedBalance * epochRewardsPercentage * 600, 31536000 * 100, 0);\\n\\n        address[] memory _playerAddresses = playerAddresses;\\n        uint256 _playerId = playerId;\\n        uint256 _epochRewards = epochRewards;\\n        uint256 maxedFactor1 = 0;\\n        uint256 maxedFactor2 = 0;\\n        uint256 maxedFactor3 = 0;\\n        uint256 factor1 = 0;\\n        uint256 factor2 = 0;\\n        uint256 factor3 = 0;\\n\\n        for (uint256 i = 1; i <= _playerId; i = unsafeInc(i)) {\\n            if (stakedESSBalance[_playerAddresses[i - 1]] > 0) {\\n                maxedFactor1 += stakedESSBalance[_playerAddresses[i - 1]] * _calculateTimeTier(_playerAddresses[i - 1]);\\n            }\\n        }\\n\\n        maxedFactor2 = totalVaultPartsContributed;\\n        maxedFactor3 =\\n            mothoraGameContract.totalFactionMembers(1) *\\n            factionPartsBalance[1] +\\n            mothoraGameContract.totalFactionMembers(2) *\\n            factionPartsBalance[2] +\\n            mothoraGameContract.totalFactionMembers(3) *\\n            factionPartsBalance[3];\\n\\n        if (maxedFactor2 != 0) {\\n            uint256 faction;\\n            // Distributes the rewards\\n            for (uint256 i = 1; i <= playerId; i = unsafeInc(i)) {\\n                factor1 = (stakedESSBalance[playerAddresses[i - 1]] * _calculateTimeTier(_playerAddresses[i - 1]));\\n                factor2 = playerStakedPartsBalance[_playerAddresses[i - 1]];\\n                faction = mothoraGameContract.getPlayerFaction(_playerAddresses[i - 1]);\\n\\n                factor3 = factionPartsBalance[faction];\\n\\n                RewardsBalance[_playerAddresses[i - 1]] +=\\n                    divider(factor1 * 70 * _epochRewards, maxedFactor1 * 100, 0) +\\n                    divider(factor2 * 25 * _epochRewards, maxedFactor2 * 100, 0) +\\n                    divider(factor3 * 5 * _epochRewards, maxedFactor3 * 100, 0);\\n            }\\n        } else {\\n            // Distributes the rewards\\n            for (uint256 i = 1; i <= playerId; i = unsafeInc(i)) {\\n                factor1 = (stakedESSBalance[playerAddresses[i - 1]] * _calculateTimeTier(playerAddresses[i - 1]));\\n\\n                RewardsBalance[playerAddresses[i - 1]] += divider(factor1 * epochRewards, maxedFactor1, 0);\\n            }\\n        }\\n        lastDistributionTime = block.timestamp;\\n    }\\n\\n    function claimEpochRewards(bool autocompound) external activeAccounts {\\n        uint256 transferValue = RewardsBalance[msg.sender];\\n        RewardsBalance[msg.sender] = 0;\\n\\n        if (autocompound) {\\n            _stakeTokens(transferValue);\\n        } else {\\n            IERC20(mothoraGameContract.getEssence()).safeTransfer(msg.sender, transferValue);\\n        }\\n    }\\n\\n    function divider(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 precision\\n    ) public pure returns (uint256) {\\n        return ((numerator * (uint256(10)**uint256(precision + 1))) / denominator + 5) / uint256(10);\\n    }\\n\\n    function getTotalBalance(address _player)\\n        external\\n        view\\n        returns (\\n            uint256 balance,\\n            uint256 stakedBalance,\\n            uint256 pendingRewards\\n        )\\n    {\\n        balance = IERC20(mothoraGameContract.getEssence()).balanceOf(_player);\\n        stakedBalance = stakedESSBalance[_player];\\n        pendingRewards = RewardsBalance[_player];\\n\\n        return (balance, stakedBalance, pendingRewards);\\n    }\\n\\n    function getPlayerVaultPartsBalance(address _player) external view returns (uint256 playerVaultPartsBalance) {\\n        playerVaultPartsBalance = playerStakedPartsBalance[_player];\\n\\n        return playerVaultPartsBalance;\\n    }\\n\\n    function getFactionVaultPartsBalance(uint256 _faction) external view returns (uint256 factionVaultPartsBalance) {\\n        factionVaultPartsBalance = factionPartsBalance[_faction];\\n\\n        return factionVaultPartsBalance;\\n    }\\n\\n    function _stakeTokens(uint256 _amount) internal {\\n        uint256 initialStakedAmount = stakedESSBalance[msg.sender];\\n\\n        if (initialStakedAmount == 0) {\\n            if (playerIds[msg.sender] == 0) {\\n                playerId++;\\n                playerIds[msg.sender] = playerId;\\n                playerAddresses.push(msg.sender);\\n            }\\n            lastUpdate[msg.sender] = block.timestamp;\\n        } else {\\n            stakedDuration[msg.sender] =\\n                (block.timestamp - lastUpdate[msg.sender]) *\\n                (initialStakedAmount / stakedESSBalance[msg.sender]); //weighted average of balance & time staked\\n        }\\n\\n        stakedESSBalance[msg.sender] += _amount;\\n        totalStakedBalance += _amount;\\n    }\\n\\n    function _calculateTimeTier(address _recipient) private returns (uint256) {\\n        stakedDuration[_recipient] += (block.timestamp - lastUpdate[_recipient]);\\n        lastUpdate[_recipient] = block.timestamp;\\n        uint256 stakedDurationLocal = stakedDuration[_recipient];\\n        if (stakedDurationLocal <= 600) {\\n            timeTier[_recipient] = 10;\\n        } else if (stakedDurationLocal > 600 && stakedDurationLocal <= 1200) {\\n            timeTier[_recipient] = 13;\\n        } else if (stakedDurationLocal > 1200 && stakedDurationLocal <= 3000) {\\n            timeTier[_recipient] = 16;\\n        } else if (stakedDurationLocal > 3000) {\\n            timeTier[_recipient] = 20;\\n        }\\n        return timeTier[_recipient];\\n    }\\n\\n    /**\\n     * @dev Returns the address of the Mothora Game Hub Contract\\n     * @return The Mothora Game address\\n     **/\\n    function getMothoraGame() public view returns (address) {\\n        return address(mothoraGameContract);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the Mothora Game\\n     * @param mothoraGameContractAddress The new Mothora Game address\\n     **/\\n    function setMothoraGame(address mothoraGameContractAddress) external onlyOwner {\\n        mothoraGameContract = MothoraGame(mothoraGameContractAddress);\\n        emit MothoraGameAddressUpdated(mothoraGameContractAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xba3ec66500f60eaa7894e991ef82a724c017477deaaf95df0fba23ba4483ac07\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002811380380620028118339810160408190526200003491620000c4565b6200003f3362000074565b60018055600a80546001600160a01b0319166001600160a01b039490941693909317909255600f556010554260115562000109565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060608486031215620000da57600080fd5b83516001600160a01b0381168114620000f257600080fd5b602085015160409095015190969495509392505050565b6126f880620001196000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806384e936631161011a578063d36ec061116100ad578063ee9420b21161007c578063ee9420b2146104e4578063f23a6e61146104f7578063f2fde38b14610516578063f60ca64114610529578063ffc1a8de1461053257600080fd5b8063d36ec06114610463578063d3d3819314610483578063d7f81f36146104b1578063eaaa1b1d146104c457600080fd5b80639dc36179116100e95780639dc36179146103da578063bc197c81146103fa578063cb03fb1e14610432578063d0ca5f6c1461045257600080fd5b806384e936631461037757806388e1e939146103805780638da5cb5b146103a0578063986812e8146103b157600080fd5b8063608e4dd01161019d578063715018a61161016c578063715018a61461033757806372cf17731461033f5780637547c7a31461035257806375b1735014610365578063773f7a3a1461036e57600080fd5b8063608e4dd0146102f3578063696786d3146103065780636f4a2cd014610326578063713c0e1a1461032e57600080fd5b806315c6aee2116101d957806315c6aee21461027f57806344cfedbd146102aa5780634ff0876a146102ca5780635ca5e068146102d357600080fd5b806301ffc9a71461020b57806302ee2700146102335780630620eedc146102485780630f3c1fe51461025f575b600080fd5b61021e6102193660046120dd565b61053b565b60405190151581526020015b60405180910390f35b61024661024136600461211c565b610572565b005b610251600b5481565b60405190815260200161022a565b61025161026d36600461211c565b60086020526000908152604090205481565b61029261028d366004612139565b6105c4565b6040516001600160a01b03909116815260200161022a565b6102516102b836600461211c565b60056020526000908152604090205481565b61025160105481565b6102516102e1366004612139565b60096020526000908152604090205481565b610246610301366004612139565b6105ee565b61025161031436600461211c565b60076020526000908152604090205481565b61024661088e565b61025160135481565b6102466110b1565b61024661034d366004612160565b6110c5565b610246610360366004612139565b611289565b610251600e5481565b610251600c5481565b610251600f5481565b61025161038e36600461211c565b60026020526000908152604090205481565b6000546001600160a01b0316610292565b6102516103bf36600461211c565b6001600160a01b031660009081526008602052604090205490565b6102516103e8366004612139565b60009081526009602052604090205490565b6104196104083660046122a9565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161022a565b61025161044036600461211c565b60066020526000908152604090205481565b600a546001600160a01b0316610292565b61025161047136600461211c565b60046020526000908152604090205481565b61049661049136600461211c565b6114aa565b6040805193845260208401929092529082015260600161022a565b6102516104bf366004612357565b6115c4565b6102516104d236600461211c565b60036020526000908152604090205481565b6102466104f2366004612139565b611612565b610419610505366004612383565b63f23a6e6160e01b95945050505050565b61024661052436600461211c565b611a9c565b61025160115481565b610251600d5481565b60006001600160e01b03198216630271189760e51b148061056c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61057a611b15565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517fb470247bc93cda00b99087355b926ca47d43fc2d926a1fc9dda5c26af915d06d90600090a250565b601281815481106105d457600080fd5b6000918252602090912001546001600160a01b0316905081565b6002600154036106195760405162461bcd60e51b8152600401610610906123ec565b60405180910390fd5b6002600155600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061243c565b9050811580159061070c575080155b6107285760405162461bcd60e51b815260040161061090612459565b600083116107785760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e74206d757374206265206d6f7265207468616e20302e00000000006044820152606401610610565b336000908152600260205260409020546107d45760405162461bcd60e51b815260206004820152601b60248201527f5374616b696e672062616c616e63652063616e6e6f74206265203000000000006044820152606401610610565b336000908152600260205260409020548311156108485760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e7374616b65206d6f7265207468616e20796f757220737460448201526b616b65642062616c616e636560a01b6064820152608401610610565b336000908152600260205260408120805485929061086790849061249b565b9250508190555082600b6000828254610880919061249b565b909155505060018055505050565b610896611b15565b6000600b54116108e85760405162461bcd60e51b815260206004820152601a60248201527f546865726520617265206e6f20746f6b656e73207374616b65640000000000006044820152606401610610565b6000601054601154426108fb919061249b565b61090591906124b2565b60105461091291906124d4565b60115461091f91906124f3565b905080600e54106109875760405162461bcd60e51b815260206004820152602c60248201527f54686520706c617965722068617320616c726561647920636c61696d6564206960448201526b0dc40e8d0d2e640cae0dec6d60a31b6064820152608401610610565b6109b2600f54600b5461099a91906124d4565b6109a6906102586124d4565b63bbf81e0060006115c4565b600c55601280546040805160208084028201810190925282815260009390929091830182828015610a0c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ee575b5050601354600c54949550939250600091508190508080808060015b888111610b135760006002818c610a4060018661249b565b81518110610a5057610a5061250b565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541115610b0b57610aab8a610a8e60018461249b565b81518110610a9e57610a9e61250b565b6020026020010151611b6f565b600260008c610abb60018661249b565b81518110610acb57610acb61250b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054610afe91906124d4565b610b0890886124f3565b96505b600101610a28565b50600d546003600081905260096020527fc575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e754600a54604051633093550960e01b81526004810193909352929750916001600160a01b031690633093550990602401602060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190612423565b610bbf91906124d4565b6002600081905260096020527f6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c354600a54604051633093550960e01b815291926001600160a01b0390911691633093550991610c219160040190815260200190565b602060405180830381865afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190612423565b610c6c91906124d4565b6001600081905260096020527f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a3654600a54604051633093550960e01b815291926001600160a01b0390911691633093550991610cce9160040190815260200190565b602060405180830381865afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f9190612423565b610d1991906124d4565b610d2391906124f3565b610d2d91906124f3565b93508415610f8c57600060015b6013548111610f8557610d528b610a8e60018461249b565b600260006012610d6360018661249b565b81548110610d7357610d7361250b565b60009182526020808320909101546001600160a01b03168352820192909252604001902054610da291906124d4565b9450600860008c610db460018561249b565b81518110610dc457610dc461250b565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054600a549095501663915109798c610e0360018561249b565b81518110610e1357610e1361250b565b60200260200101516040518263ffffffff1660e01b8152600401610e4691906001600160a01b0391909116815260200190565b602060405180830381865afa158015610e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e879190612423565b60008181526009602052604090205493509150610ec589610ea98560056124d4565b610eb391906124d4565b610ebe8860646124d4565b60006115c4565b610ee98a610ed48760196124d4565b610ede91906124d4565b610ebe8a60646124d4565b610f0d8b610ef88960466124d4565b610f0291906124d4565b610ebe8c60646124d4565b610f1791906124f3565b610f2191906124f3565b600360008d610f3160018661249b565b81518110610f4157610f4161250b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000828254610f7891906124f3565b9091555050600101610d3a565b50506110a1565b60015b601354811161109f57610fd26012610fa860018461249b565b81548110610fb857610fb861250b565b6000918252602090912001546001600160a01b0316611b6f565b600260006012610fe360018661249b565b81548110610ff357610ff361250b565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461102291906124d4565b935061103d600c548561103591906124d4565b8860006115c4565b60036000601261104e60018661249b565b8154811061105e5761105e61250b565b60009182526020808320909101546001600160a01b03168352820192909252604001812080549091906110929084906124f3565b9091555050600101610f8f565b505b505042600e555050505050505050565b6110b9611b15565b6110c36000611cc5565b565b600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa15801561110e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111329190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a4919061243c565b905081158015906111b3575080155b6111cf5760405162461bcd60e51b815260040161061090612459565b336000908152600360205260408120805491905583156111f7576111f281611d15565b611283565b6112833382600a60009054906101000a90046001600160a01b03166001600160a01b03166306274eac6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190612521565b6001600160a01b03169190611e57565b50505050565b6002600154036112ab5760405162461bcd60e51b8152600401610610906123ec565b6002600155600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f919061243c565b9050811580159061139e575080155b6113ba5760405162461bcd60e51b815260040161061090612459565b6000831161140a5760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e74206d757374206265206d6f7265207468616e20302e00000000006044820152606401610610565b611498333085600a60009054906101000a90046001600160a01b03166001600160a01b03166306274eac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190612521565b6001600160a01b0316929190611ebf565b6114a183611d15565b50506001805550565b6000806000600a60009054906101000a90046001600160a01b03166001600160a01b03166306274eac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190612521565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612423565b6001600160a01b0394909416600090815260026020908152604080832054600390925290912054949590949350915050565b6000600a836115d48460016124f3565b6115df90600a612622565b6115e990876124d4565b6115f391906124b2565b6115fe9060056124f3565b61160891906124b2565b90505b9392505050565b6002600154036116345760405162461bcd60e51b8152600401610610906123ec565b6002600155600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a69190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611718919061243c565b90508115801590611727575080155b6117435760405162461bcd60e51b815260040161061090612459565b600083116117935760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e74206d757374206265206d6f7265207468616e20300000000000006044820152606401610610565b600a5460408051631dcf023d60e11b815290516000926001600160a01b031691633b9e047a9160048083019260209291908290030181865afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118019190612521565b905083816001600160a01b031662fdd58e33846001600160a01b03166347312a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118759190612423565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190612423565b10156119425760405162461bcd60e51b815260206004820152602960248201527f54686520506c6179657220646f6573206e6f74206861766520656e6f7567682060448201526841727469666163747360b81b6064820152608401610610565b33600090815260086020526040812080548692906119619084906124f3565b9091555050600a54604051639151097960e01b81523360048201526000916001600160a01b031690639151097990602401602060405180830381865afa1580156119af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d39190612423565b9050846009600083815260200190815260200160002060008282546119f891906124f3565b9250508190555084600d6000828254611a1191906124f3565b9091555050604051637921219560e11b81523360048201523060248201526000604482018190526064820187905260a0608483015260a48201526001600160a01b0383169063f242432a9060c401600060405180830381600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b50506001805550505050505050565b611aa4611b15565b6001600160a01b038116611b095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610610565b611b1281611cc5565b50565b6000546001600160a01b031633146110c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610610565b6001600160a01b038116600090815260066020526040812054611b92904261249b565b6001600160a01b03831660009081526005602052604081208054909190611bba9084906124f3565b90915550506001600160a01b038216600090815260066020908152604080832042905560059091529020546102588111611c0f576001600160a01b0383166000908152600760205260409020600a9055611ca8565b61025881118015611c2257506104b08111155b15611c48576001600160a01b0383166000908152600760205260409020600d9055611ca8565b6104b081118015611c5b5750610bb88111155b15611c81576001600160a01b038316600090815260076020526040902060109055611ca8565b610bb8811115611ca8576001600160a01b0383166000908152600760205260409020601490555b50506001600160a01b031660009081526007602052604090205490565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604081205490819003611dc757336000908152600460205260408120549003611db05760138054906000611d538361262e565b9091555050601354336000818152600460205260408120929092556012805460018101825592527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490910180546001600160a01b03191690911790555b336000908152600660205260409020429055611e16565b33600090815260026020526040902054611de190826124b2565b33600090815260066020526040902054611dfb904261249b565b611e0591906124d4565b336000908152600560205260409020555b3360009081526002602052604081208054849290611e359084906124f3565b9250508190555081600b6000828254611e4e91906124f3565b90915550505050565b6040516001600160a01b038316602482015260448101829052611eba90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ef7565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112839085906323b872dd60e01b90608401611e83565b6000611f4c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fc99092919063ffffffff16565b805190915015611eba5780806020019051810190611f6a919061243c565b611eba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610610565b60606116088484600085856001600160a01b0385163b61202b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610610565b600080866001600160a01b031685876040516120479190612673565b60006040518083038185875af1925050503d8060008114612084576040519150601f19603f3d011682016040523d82523d6000602084013e612089565b606091505b50915091506120998282866120a4565b979650505050505050565b606083156120b357508161160b565b8251156120c35782518084602001fd5b8160405162461bcd60e51b8152600401610610919061268f565b6000602082840312156120ef57600080fd5b81356001600160e01b03198116811461160b57600080fd5b6001600160a01b0381168114611b1257600080fd5b60006020828403121561212e57600080fd5b813561160b81612107565b60006020828403121561214b57600080fd5b5035919050565b8015158114611b1257600080fd5b60006020828403121561217257600080fd5b813561160b81612152565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121bc576121bc61217d565b604052919050565b600082601f8301126121d557600080fd5b8135602067ffffffffffffffff8211156121f1576121f161217d565b8160051b612200828201612193565b928352848101820192828101908785111561221a57600080fd5b83870192505b8483101561209957823582529183019190830190612220565b600082601f83011261224a57600080fd5b813567ffffffffffffffff8111156122645761226461217d565b612277601f8201601f1916602001612193565b81815284602083860101111561228c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156122c157600080fd5b85356122cc81612107565b945060208601356122dc81612107565b9350604086013567ffffffffffffffff808211156122f957600080fd5b61230589838a016121c4565b9450606088013591508082111561231b57600080fd5b61232789838a016121c4565b9350608088013591508082111561233d57600080fd5b5061234a88828901612239565b9150509295509295909350565b60008060006060848603121561236c57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561239b57600080fd5b85356123a681612107565b945060208601356123b681612107565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123e057600080fd5b61234a88828901612239565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561243557600080fd5b5051919050565b60006020828403121561244e57600080fd5b815161160b81612152565b6020808252601290820152714143434f554e545f4e4f545f41435449564560701b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156124ad576124ad612485565b500390565b6000826124cf57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156124ee576124ee612485565b500290565b6000821982111561250657612506612485565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561253357600080fd5b815161160b81612107565b600181815b8085111561257957816000190482111561255f5761255f612485565b8085161561256c57918102915b93841c9390800290612543565b509250929050565b6000826125905750600161056c565b8161259d5750600061056c565b81600181146125b357600281146125bd576125d9565b600191505061056c565b60ff8411156125ce576125ce612485565b50506001821b61056c565b5060208310610133831016604e8410600b84101617156125fc575081810a61056c565b612606838361253e565b806000190482111561261a5761261a612485565b029392505050565b600061160b8383612581565b60006001820161264057612640612485565b5060010190565b60005b8381101561266257818101518382015260200161264a565b838111156112835750506000910152565b60008251612685818460208701612647565b9190910192915050565b60208152600082518060208401526126ae816040850160208701612647565b601f01601f1916919091016040019291505056fea264697066735822122004a82c9fe6a29199183e0945c13c461ce3840b8e96a2911623523ed8d5b1665564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806384e936631161011a578063d36ec061116100ad578063ee9420b21161007c578063ee9420b2146104e4578063f23a6e61146104f7578063f2fde38b14610516578063f60ca64114610529578063ffc1a8de1461053257600080fd5b8063d36ec06114610463578063d3d3819314610483578063d7f81f36146104b1578063eaaa1b1d146104c457600080fd5b80639dc36179116100e95780639dc36179146103da578063bc197c81146103fa578063cb03fb1e14610432578063d0ca5f6c1461045257600080fd5b806384e936631461037757806388e1e939146103805780638da5cb5b146103a0578063986812e8146103b157600080fd5b8063608e4dd01161019d578063715018a61161016c578063715018a61461033757806372cf17731461033f5780637547c7a31461035257806375b1735014610365578063773f7a3a1461036e57600080fd5b8063608e4dd0146102f3578063696786d3146103065780636f4a2cd014610326578063713c0e1a1461032e57600080fd5b806315c6aee2116101d957806315c6aee21461027f57806344cfedbd146102aa5780634ff0876a146102ca5780635ca5e068146102d357600080fd5b806301ffc9a71461020b57806302ee2700146102335780630620eedc146102485780630f3c1fe51461025f575b600080fd5b61021e6102193660046120dd565b61053b565b60405190151581526020015b60405180910390f35b61024661024136600461211c565b610572565b005b610251600b5481565b60405190815260200161022a565b61025161026d36600461211c565b60086020526000908152604090205481565b61029261028d366004612139565b6105c4565b6040516001600160a01b03909116815260200161022a565b6102516102b836600461211c565b60056020526000908152604090205481565b61025160105481565b6102516102e1366004612139565b60096020526000908152604090205481565b610246610301366004612139565b6105ee565b61025161031436600461211c565b60076020526000908152604090205481565b61024661088e565b61025160135481565b6102466110b1565b61024661034d366004612160565b6110c5565b610246610360366004612139565b611289565b610251600e5481565b610251600c5481565b610251600f5481565b61025161038e36600461211c565b60026020526000908152604090205481565b6000546001600160a01b0316610292565b6102516103bf36600461211c565b6001600160a01b031660009081526008602052604090205490565b6102516103e8366004612139565b60009081526009602052604090205490565b6104196104083660046122a9565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161022a565b61025161044036600461211c565b60066020526000908152604090205481565b600a546001600160a01b0316610292565b61025161047136600461211c565b60046020526000908152604090205481565b61049661049136600461211c565b6114aa565b6040805193845260208401929092529082015260600161022a565b6102516104bf366004612357565b6115c4565b6102516104d236600461211c565b60036020526000908152604090205481565b6102466104f2366004612139565b611612565b610419610505366004612383565b63f23a6e6160e01b95945050505050565b61024661052436600461211c565b611a9c565b61025160115481565b610251600d5481565b60006001600160e01b03198216630271189760e51b148061056c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61057a611b15565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517fb470247bc93cda00b99087355b926ca47d43fc2d926a1fc9dda5c26af915d06d90600090a250565b601281815481106105d457600080fd5b6000918252602090912001546001600160a01b0316905081565b6002600154036106195760405162461bcd60e51b8152600401610610906123ec565b60405180910390fd5b6002600155600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061243c565b9050811580159061070c575080155b6107285760405162461bcd60e51b815260040161061090612459565b600083116107785760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e74206d757374206265206d6f7265207468616e20302e00000000006044820152606401610610565b336000908152600260205260409020546107d45760405162461bcd60e51b815260206004820152601b60248201527f5374616b696e672062616c616e63652063616e6e6f74206265203000000000006044820152606401610610565b336000908152600260205260409020548311156108485760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e7374616b65206d6f7265207468616e20796f757220737460448201526b616b65642062616c616e636560a01b6064820152608401610610565b336000908152600260205260408120805485929061086790849061249b565b9250508190555082600b6000828254610880919061249b565b909155505060018055505050565b610896611b15565b6000600b54116108e85760405162461bcd60e51b815260206004820152601a60248201527f546865726520617265206e6f20746f6b656e73207374616b65640000000000006044820152606401610610565b6000601054601154426108fb919061249b565b61090591906124b2565b60105461091291906124d4565b60115461091f91906124f3565b905080600e54106109875760405162461bcd60e51b815260206004820152602c60248201527f54686520706c617965722068617320616c726561647920636c61696d6564206960448201526b0dc40e8d0d2e640cae0dec6d60a31b6064820152608401610610565b6109b2600f54600b5461099a91906124d4565b6109a6906102586124d4565b63bbf81e0060006115c4565b600c55601280546040805160208084028201810190925282815260009390929091830182828015610a0c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ee575b5050601354600c54949550939250600091508190508080808060015b888111610b135760006002818c610a4060018661249b565b81518110610a5057610a5061250b565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020541115610b0b57610aab8a610a8e60018461249b565b81518110610a9e57610a9e61250b565b6020026020010151611b6f565b600260008c610abb60018661249b565b81518110610acb57610acb61250b565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054610afe91906124d4565b610b0890886124f3565b96505b600101610a28565b50600d546003600081905260096020527fc575c31fea594a6eb97c8e9d3f9caee4c16218c6ef37e923234c0fe9014a61e754600a54604051633093550960e01b81526004810193909352929750916001600160a01b031690633093550990602401602060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190612423565b610bbf91906124d4565b6002600081905260096020527f6cde3cea4b3a3fb2488b2808bae7556f4a405e50f65e1794383bc026131b13c354600a54604051633093550960e01b815291926001600160a01b0390911691633093550991610c219160040190815260200190565b602060405180830381865afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190612423565b610c6c91906124d4565b6001600081905260096020527f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a3654600a54604051633093550960e01b815291926001600160a01b0390911691633093550991610cce9160040190815260200190565b602060405180830381865afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f9190612423565b610d1991906124d4565b610d2391906124f3565b610d2d91906124f3565b93508415610f8c57600060015b6013548111610f8557610d528b610a8e60018461249b565b600260006012610d6360018661249b565b81548110610d7357610d7361250b565b60009182526020808320909101546001600160a01b03168352820192909252604001902054610da291906124d4565b9450600860008c610db460018561249b565b81518110610dc457610dc461250b565b6020908102919091018101516001600160a01b0390811683529082019290925260400160002054600a549095501663915109798c610e0360018561249b565b81518110610e1357610e1361250b565b60200260200101516040518263ffffffff1660e01b8152600401610e4691906001600160a01b0391909116815260200190565b602060405180830381865afa158015610e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e879190612423565b60008181526009602052604090205493509150610ec589610ea98560056124d4565b610eb391906124d4565b610ebe8860646124d4565b60006115c4565b610ee98a610ed48760196124d4565b610ede91906124d4565b610ebe8a60646124d4565b610f0d8b610ef88960466124d4565b610f0291906124d4565b610ebe8c60646124d4565b610f1791906124f3565b610f2191906124f3565b600360008d610f3160018661249b565b81518110610f4157610f4161250b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000828254610f7891906124f3565b9091555050600101610d3a565b50506110a1565b60015b601354811161109f57610fd26012610fa860018461249b565b81548110610fb857610fb861250b565b6000918252602090912001546001600160a01b0316611b6f565b600260006012610fe360018661249b565b81548110610ff357610ff361250b565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461102291906124d4565b935061103d600c548561103591906124d4565b8860006115c4565b60036000601261104e60018661249b565b8154811061105e5761105e61250b565b60009182526020808320909101546001600160a01b03168352820192909252604001812080549091906110929084906124f3565b9091555050600101610f8f565b505b505042600e555050505050505050565b6110b9611b15565b6110c36000611cc5565b565b600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa15801561110e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111329190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a4919061243c565b905081158015906111b3575080155b6111cf5760405162461bcd60e51b815260040161061090612459565b336000908152600360205260408120805491905583156111f7576111f281611d15565b611283565b6112833382600a60009054906101000a90046001600160a01b03166001600160a01b03166306274eac6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190612521565b6001600160a01b03169190611e57565b50505050565b6002600154036112ab5760405162461bcd60e51b8152600401610610906123ec565b6002600155600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f919061243c565b9050811580159061139e575080155b6113ba5760405162461bcd60e51b815260040161061090612459565b6000831161140a5760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e74206d757374206265206d6f7265207468616e20302e00000000006044820152606401610610565b611498333085600a60009054906101000a90046001600160a01b03166001600160a01b03166306274eac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190612521565b6001600160a01b0316929190611ebf565b6114a183611d15565b50506001805550565b6000806000600a60009054906101000a90046001600160a01b03166001600160a01b03166306274eac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190612521565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612423565b6001600160a01b0394909416600090815260026020908152604080832054600390925290912054949590949350915050565b6000600a836115d48460016124f3565b6115df90600a612622565b6115e990876124d4565b6115f391906124b2565b6115fe9060056124f3565b61160891906124b2565b90505b9392505050565b6002600154036116345760405162461bcd60e51b8152600401610610906123ec565b6002600155600a54604051631895c2d560e31b81523360048201526000916001600160a01b03169063c4ae16a890602401602060405180830381865afa158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a69190612423565b600a54604051630f45db9160e01b81523360048201529192506000916001600160a01b0390911690630f45db9190602401602060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611718919061243c565b90508115801590611727575080155b6117435760405162461bcd60e51b815260040161061090612459565b600083116117935760405162461bcd60e51b815260206004820152601a60248201527f416d6f756e74206d757374206265206d6f7265207468616e20300000000000006044820152606401610610565b600a5460408051631dcf023d60e11b815290516000926001600160a01b031691633b9e047a9160048083019260209291908290030181865afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118019190612521565b905083816001600160a01b031662fdd58e33846001600160a01b03166347312a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118759190612423565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190612423565b10156119425760405162461bcd60e51b815260206004820152602960248201527f54686520506c6179657220646f6573206e6f74206861766520656e6f7567682060448201526841727469666163747360b81b6064820152608401610610565b33600090815260086020526040812080548692906119619084906124f3565b9091555050600a54604051639151097960e01b81523360048201526000916001600160a01b031690639151097990602401602060405180830381865afa1580156119af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d39190612423565b9050846009600083815260200190815260200160002060008282546119f891906124f3565b9250508190555084600d6000828254611a1191906124f3565b9091555050604051637921219560e11b81523360048201523060248201526000604482018190526064820187905260a0608483015260a48201526001600160a01b0383169063f242432a9060c401600060405180830381600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b50506001805550505050505050565b611aa4611b15565b6001600160a01b038116611b095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610610565b611b1281611cc5565b50565b6000546001600160a01b031633146110c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610610565b6001600160a01b038116600090815260066020526040812054611b92904261249b565b6001600160a01b03831660009081526005602052604081208054909190611bba9084906124f3565b90915550506001600160a01b038216600090815260066020908152604080832042905560059091529020546102588111611c0f576001600160a01b0383166000908152600760205260409020600a9055611ca8565b61025881118015611c2257506104b08111155b15611c48576001600160a01b0383166000908152600760205260409020600d9055611ca8565b6104b081118015611c5b5750610bb88111155b15611c81576001600160a01b038316600090815260076020526040902060109055611ca8565b610bb8811115611ca8576001600160a01b0383166000908152600760205260409020601490555b50506001600160a01b031660009081526007602052604090205490565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526002602052604081205490819003611dc757336000908152600460205260408120549003611db05760138054906000611d538361262e565b9091555050601354336000818152600460205260408120929092556012805460018101825592527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490910180546001600160a01b03191690911790555b336000908152600660205260409020429055611e16565b33600090815260026020526040902054611de190826124b2565b33600090815260066020526040902054611dfb904261249b565b611e0591906124d4565b336000908152600560205260409020555b3360009081526002602052604081208054849290611e359084906124f3565b9250508190555081600b6000828254611e4e91906124f3565b90915550505050565b6040516001600160a01b038316602482015260448101829052611eba90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ef7565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526112839085906323b872dd60e01b90608401611e83565b6000611f4c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fc99092919063ffffffff16565b805190915015611eba5780806020019051810190611f6a919061243c565b611eba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610610565b60606116088484600085856001600160a01b0385163b61202b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610610565b600080866001600160a01b031685876040516120479190612673565b60006040518083038185875af1925050503d8060008114612084576040519150601f19603f3d011682016040523d82523d6000602084013e612089565b606091505b50915091506120998282866120a4565b979650505050505050565b606083156120b357508161160b565b8251156120c35782518084602001fd5b8160405162461bcd60e51b8152600401610610919061268f565b6000602082840312156120ef57600080fd5b81356001600160e01b03198116811461160b57600080fd5b6001600160a01b0381168114611b1257600080fd5b60006020828403121561212e57600080fd5b813561160b81612107565b60006020828403121561214b57600080fd5b5035919050565b8015158114611b1257600080fd5b60006020828403121561217257600080fd5b813561160b81612152565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121bc576121bc61217d565b604052919050565b600082601f8301126121d557600080fd5b8135602067ffffffffffffffff8211156121f1576121f161217d565b8160051b612200828201612193565b928352848101820192828101908785111561221a57600080fd5b83870192505b8483101561209957823582529183019190830190612220565b600082601f83011261224a57600080fd5b813567ffffffffffffffff8111156122645761226461217d565b612277601f8201601f1916602001612193565b81815284602083860101111561228c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156122c157600080fd5b85356122cc81612107565b945060208601356122dc81612107565b9350604086013567ffffffffffffffff808211156122f957600080fd5b61230589838a016121c4565b9450606088013591508082111561231b57600080fd5b61232789838a016121c4565b9350608088013591508082111561233d57600080fd5b5061234a88828901612239565b9150509295509295909350565b60008060006060848603121561236c57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a0868803121561239b57600080fd5b85356123a681612107565b945060208601356123b681612107565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123e057600080fd5b61234a88828901612239565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561243557600080fd5b5051919050565b60006020828403121561244e57600080fd5b815161160b81612152565b6020808252601290820152714143434f554e545f4e4f545f41435449564560701b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156124ad576124ad612485565b500390565b6000826124cf57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156124ee576124ee612485565b500290565b6000821982111561250657612506612485565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561253357600080fd5b815161160b81612107565b600181815b8085111561257957816000190482111561255f5761255f612485565b8085161561256c57918102915b93841c9390800290612543565b509250929050565b6000826125905750600161056c565b8161259d5750600061056c565b81600181146125b357600281146125bd576125d9565b600191505061056c565b60ff8411156125ce576125ce612485565b50506001821b61056c565b5060208310610133831016604e8410600b84101617156125fc575081810a61056c565b612606838361253e565b806000190482111561261a5761261a612485565b029392505050565b600061160b8383612581565b60006001820161264057612640612485565b5060010190565b60005b8381101561266257818101518382015260200161264a565b838111156112835750506000910152565b60008251612685818460208701612647565b9190910192915050565b60208152600082518060208401526126ae816040850160208701612647565b601f01601f1916919091016040019291505056fea264697066735822122004a82c9fe6a29199183e0945c13c461ce3840b8e96a2911623523ed8d5b1665564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getMothoraGame()": {
        "details": "Returns the address of the Mothora Game Hub Contract",
        "returns": {
          "_0": "The Mothora Game address*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMothoraGame(address)": {
        "details": "Updates the address of the Mothora Game",
        "params": {
          "mothoraGameContractAddress": "The new Mothora Game address*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5349,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5573,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13459,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "stakedESSBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13463,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "RewardsBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13467,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "playerIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13471,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "stakedDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13475,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "lastUpdate",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13479,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "timeTier",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13483,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "playerStakedPartsBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13487,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "factionPartsBalance",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13490,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "mothoraGameContract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(MothoraGame)12188"
      },
      {
        "astId": 13492,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "totalStakedBalance",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 13494,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "epochRewards",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13496,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "totalVaultPartsContributed",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 13498,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "lastDistributionTime",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13500,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "epochRewardsPercentage",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 13502,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "epochDuration",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 13504,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "epochStartTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 13507,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "playerAddresses",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13509,
        "contract": "contracts/modules/EssenceAbsorber.sol:EssenceAbsorber",
        "label": "playerId",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(MothoraGame)12188": {
        "encoding": "inplace",
        "label": "contract MothoraGame",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}