{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "CallbackSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "FlowAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FlowDefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FlowFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FlowGrant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        }
      ],
      "name": "FlowRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "FlowTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "flow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsPaidInTotal",
          "type": "uint256"
        }
      ],
      "name": "RewardsPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ESSENCE_FIELD_CREATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_callback",
          "type": "bool"
        }
      ],
      "name": "addFlow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "callbackRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "defundFlow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "essence",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "flowConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratePerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundFlow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        }
      ],
      "name": "getFlowConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratePerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paid",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEssenceField.EssenceFlow",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFlows",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalRatePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "globalRatePerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        }
      ],
      "name": "getPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        }
      ],
      "name": "getRatePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ratePerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "grantTokenToFlow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_essence",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        }
      ],
      "name": "removeFlow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardsPaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_essence",
          "type": "address"
        }
      ],
      "name": "setEssenceToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "updateFlowTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEssence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc6368ec7871ed9d98eec4346d92b6cce1e09a4793f82f83b6b781cab9d32374",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "2298597",
    "logsBloom": "0x
    "blockHash": "0x3fd607ac112de8453a5fa525b00abaf6091287da00b0afab9c26ddc2a1bf4554",
    "transactionHash": "0xfc6368ec7871ed9d98eec4346d92b6cce1e09a4793f82f83b6b781cab9d32374",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13,
        "transactionHash": "0xfc6368ec7871ed9d98eec4346d92b6cce1e09a4793f82f83b6b781cab9d32374",
        "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x3fd607ac112de8453a5fa525b00abaf6091287da00b0afab9c26ddc2a1bf4554"
      }
    ],
    "blockNumber": 13,
    "cumulativeGasUsed": "2298597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "179c5969a6e2a95153c16bf03df6a5b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"CallbackSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"FlowAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlowDefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlowFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlowGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"}],\"name\":\"FlowRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"FlowTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPaidInTotal\",\"type\":\"uint256\"}],\"name\":\"RewardsPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ESSENCE_FIELD_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_callback\",\"type\":\"bool\"}],\"name\":\"addFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callbackRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"defundFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"essence\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flowConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"}],\"name\":\"getFlowConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"internalType\":\"struct IEssenceField.EssenceFlow\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlows\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalRatePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"globalRatePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"}],\"name\":\"getRatePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"grantTokenToFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_essence\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"}],\"name\":\"removeFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_essence\",\"type\":\"address\"}],\"name\":\"setEssenceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateFlowTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEssence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addFlow(address,uint256,uint256,uint256,bool)\":{\"params\":{\"_callback\":\"should callback be used (if you don't know, set false)\",\"_endTimestamp\":\"when ESSENCE flow should end\",\"_flow\":\"address of the contract that gets rewards\",\"_startTimestamp\":\"when ESSENCE flow should start\",\"_totalRewards\":\"amount of ESSENCE that should be distributed in total\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callbackRegistry(address)\":{\"notice\":\"flow address => bool\"},\"flowConfig(address)\":{\"notice\":\"flow address => EssenceFlow\"},\"requestRewards()\":{\"notice\":\"how anyone can call this function but only flows that exist have amounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/EssenceField.sol\":\"EssenceField\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8defa7c9cc7cc4eb529daff535eff833f76a4cb424f85a08524eeea15e071a55\",\"license\":\"MIT\"},\"contracts/interfaces/IEssenceField.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IEssenceField {\\n    struct EssenceFlow {\\n        uint256 totalRewards;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 ratePerSecond;\\n        uint256 paid;\\n    }\\n\\n    function requestRewards() external returns (uint256 rewardsPaid);\\n\\n    function grantTokenToFlow(address _flow, uint256 _amount) external;\\n\\n    function getFlows() external view returns (address[] memory);\\n\\n    function getFlowConfig(address _flow) external view returns (EssenceFlow memory);\\n\\n    function getGlobalRatePerSecond() external view returns (uint256 globalRatePerSecond);\\n\\n    function getRatePerSecond(address _flow) external view returns (uint256 ratePerSecond);\\n\\n    function getPendingRewards(address _flow) external view returns (uint256 pendingRewards);\\n}\\n\",\"keccak256\":\"0x806fca60a88d0b91c6562384e00b8298cc7dc2d229c4dc1ef5da233ae2c042fd\",\"license\":\"MIT\"},\"contracts/interfaces/IFlow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IFlow {\\n    function preRateUpdate() external;\\n\\n    function postRateUpdate() external;\\n}\\n\",\"keccak256\":\"0x002d7d12adccda7d0827cae48fe26e2328979061e569f1ef1ad2079702e2ef83\",\"license\":\"MIT\"},\"contracts/modules/EssenceField.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./EssenceFieldV1.sol\\\";\\n\\ncontract EssenceField is EssenceFieldV1 {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    uint256 public constant PRECISION = 1e18;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function _fundFlow(address _flow, uint256 _amount) internal virtual override {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        uint256 secondsToEnd = flow.endTimestamp - flow.lastRewardTimestamp;\\n        uint256 rewardsLeft = secondsToEnd * flow.ratePerSecond;\\n        flow.ratePerSecond = ((rewardsLeft + _amount) * PRECISION) / secondsToEnd / PRECISION;\\n        flow.totalRewards += _amount;\\n    }\\n\\n    // ADMIN\\n\\n    /// @param _flow address of the contract that gets rewards\\n    /// @param _totalRewards amount of ESSENCE that should be distributed in total\\n    /// @param _startTimestamp when ESSENCE flow should start\\n    /// @param _endTimestamp when ESSENCE flow should end\\n    /// @param _callback should callback be used (if you don't know, set false)\\n    function addFlow(\\n        address _flow,\\n        uint256 _totalRewards,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        bool _callback\\n    ) external virtual override onlyRole(ESSENCE_FIELD_CREATOR_ROLE) {\\n        require(_endTimestamp > _startTimestamp, \\\"Rewards must last > 1 sec\\\");\\n        require(!flows.contains(_flow), \\\"Flow for address already exists\\\");\\n\\n        if (flows.add(_flow)) {\\n            flowConfig[_flow] = EssenceFlow({\\n                totalRewards: _totalRewards,\\n                startTimestamp: _startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                lastRewardTimestamp: _startTimestamp,\\n                ratePerSecond: (_totalRewards * PRECISION) / (_endTimestamp - _startTimestamp) / PRECISION,\\n                paid: 0\\n            });\\n            emit FlowAdded(_flow, _totalRewards, _startTimestamp, _endTimestamp);\\n\\n            setCallback(_flow, _callback);\\n        }\\n    }\\n\\n    function defundFlow(address _flow, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyRole(ESSENCE_FIELD_CREATOR_ROLE)\\n        flowExists(_flow)\\n        flowActive(_flow)\\n        callbackFlow(_flow)\\n    {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        uint256 secondsToEnd = flow.endTimestamp - flow.lastRewardTimestamp;\\n        uint256 rewardsLeft = flow.totalRewards - flow.paid;\\n\\n        require(_amount <= rewardsLeft, \\\"Reduce amount too large, rewards already paid\\\");\\n\\n        flow.ratePerSecond = ((rewardsLeft - _amount) * PRECISION) / secondsToEnd / PRECISION;\\n        flow.totalRewards -= _amount;\\n\\n        emit FlowDefunded(_flow, _amount);\\n    }\\n\\n    function updateFlowTime(\\n        address _flow,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp\\n    ) external virtual override onlyRole(ESSENCE_FIELD_CREATOR_ROLE) flowExists(_flow) callbackFlow(_flow) {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        if (_startTimestamp > 0) {\\n            require(_startTimestamp > block.timestamp, \\\"startTimestamp cannot be in the past\\\");\\n\\n            flow.startTimestamp = _startTimestamp;\\n            flow.lastRewardTimestamp = _startTimestamp;\\n        }\\n\\n        if (_endTimestamp > 0) {\\n            require(_endTimestamp > _startTimestamp, \\\"Rewards must last > 1 sec\\\");\\n            require(_endTimestamp > block.timestamp, \\\"Cannot end rewards in the past\\\");\\n\\n            flow.endTimestamp = _endTimestamp;\\n        }\\n\\n        flow.ratePerSecond =\\n            ((flow.totalRewards - flow.paid) * PRECISION) /\\n            (flow.endTimestamp - flow.lastRewardTimestamp) /\\n            PRECISION;\\n\\n        emit FlowTimeUpdated(_flow, _startTimestamp, _endTimestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xad9994e4648b888af06237de969f686850a6dfb8c393f3bfd452b8c56ba8ba81\",\"license\":\"MIT\"},\"contracts/modules/EssenceFieldV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IEssenceField.sol\\\";\\nimport \\\"../interfaces/IFlow.sol\\\";\\n\\n/// wallet controlled by trusted team members. Admin role aka ESSENCE_FIELD_CREATOR_ROLE, as initialized during init()\\n/// to msg.sender can:\\n/// \\u2022 ESSENCE_FIELD_CREATOR_ROLE, as initialized during init() to msg.sender:\\n/// \\u2022 Add or remove flows, by calling addFlow() and removeFlow(), respectively.\\n/// \\u2022 Increasing an active flow's ratePerSecond and totalRewards, by calling fundFlow().\\n/// \\u2022 Decrease an active flow's ratePerSecond and totalRewards, by calling defundFlow().\\n/// \\u2022 Modify a flow's startTimestamp, lastRewardTimestamp, endTimestamp and indirectly ratePerSecond, by calling\\n///   updateFlowTime().\\n/// \\u2022 Enable/Disable registered flow addresses as callbacks, by calling setCallback().\\n/// \\u2022 Withdraw an arbitrary essence token amount to an arbitrary address, by calling withdrawEssence().\\n/// \\u2022 Set the essence token address to an arbitrary address, by calling setEssenceToken().\\ncontract EssenceFieldV1 is IEssenceField, Initializable, AccessControlEnumerableUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bytes32 public constant ESSENCE_FIELD_CREATOR_ROLE = keccak256(\\\"ESSENCE_FIELD_CREATOR_ROLE\\\");\\n\\n    IERC20Upgradeable public essence;\\n\\n    /// @notice flow address => EssenceFlow\\n    mapping(address => EssenceFlow) public flowConfig;\\n\\n    /// @notice flow ID => flow address\\n    EnumerableSetUpgradeable.AddressSet internal flows;\\n\\n    /// @notice flow address => bool\\n    mapping(address => bool) public callbackRegistry;\\n\\n    modifier flowExists(address _flow) {\\n        require(flows.contains(_flow), \\\"Flow does not exist\\\");\\n        _;\\n    }\\n\\n    modifier flowActive(address _flow) {\\n        require(flowConfig[_flow].endTimestamp > block.timestamp, \\\"Flow ended\\\");\\n        _;\\n    }\\n\\n    modifier callbackFlow(address _flow) {\\n        if (callbackRegistry[_flow]) IFlow(_flow).preRateUpdate();\\n        _;\\n        if (callbackRegistry[_flow]) IFlow(_flow).postRateUpdate();\\n    }\\n\\n    event FlowAdded(address indexed flow, uint256 amount, uint256 startTimestamp, uint256 endTimestamp);\\n    event FlowTimeUpdated(address indexed flow, uint256 startTimestamp, uint256 endTimestamp);\\n\\n    event FlowGrant(address indexed flow, address from, uint256 amount);\\n    event FlowFunded(address indexed flow, uint256 amount);\\n    event FlowDefunded(address indexed flow, uint256 amount);\\n    event FlowRemoved(address indexed flow);\\n\\n    event RewardsPaid(address indexed flow, uint256 rewardsPaid, uint256 rewardsPaidInTotal);\\n    event Withdraw(address to, uint256 amount);\\n    event CallbackSet(address flow, bool value);\\n\\n    function init(address _essence) external initializer {\\n        essence = IERC20Upgradeable(_essence);\\n\\n        _setRoleAdmin(ESSENCE_FIELD_CREATOR_ROLE, ESSENCE_FIELD_CREATOR_ROLE);\\n        _grantRole(ESSENCE_FIELD_CREATOR_ROLE, msg.sender);\\n\\n        __AccessControlEnumerable_init();\\n    }\\n\\n    /// @notice how anyone can call this function but only flows that exist have amounts.\\n    function requestRewards() public virtual returns (uint256 rewardsPaid) {\\n        EssenceFlow storage flow = flowConfig[msg.sender];\\n\\n        rewardsPaid = getPendingRewards(msg.sender);\\n\\n        if (rewardsPaid == 0 || essence.balanceOf(address(this)) < rewardsPaid) {\\n            return 0;\\n        }\\n\\n        flow.paid += rewardsPaid;\\n        flow.lastRewardTimestamp = block.timestamp;\\n\\n        // this should never happen but better safe than sorry\\n        require(flow.paid <= flow.totalRewards, \\\"Rewards overflow\\\");\\n\\n        essence.safeTransfer(msg.sender, rewardsPaid);\\n        emit RewardsPaid(msg.sender, rewardsPaid, flow.paid);\\n    }\\n\\n    function grantTokenToFlow(address _flow, uint256 _amount)\\n        public\\n        virtual\\n        flowExists(_flow)\\n        flowActive(_flow)\\n        callbackFlow(_flow)\\n    {\\n        _fundFlow(_flow, _amount);\\n\\n        essence.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit FlowGrant(_flow, msg.sender, _amount);\\n    }\\n\\n    function getFlows() external view virtual returns (address[] memory) {\\n        return flows.values();\\n    }\\n\\n    function getFlowConfig(address _flow) external view virtual returns (EssenceFlow memory) {\\n        return flowConfig[_flow];\\n    }\\n\\n    function getGlobalRatePerSecond() external view virtual returns (uint256 globalRatePerSecond) {\\n        uint256 len = flows.length();\\n        for (uint256 i = 0; i < len; i++) {\\n            globalRatePerSecond += getRatePerSecond(flows.at(i));\\n        }\\n    }\\n\\n    function getRatePerSecond(address _flow) public view virtual returns (uint256 ratePerSecond) {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        if (flow.startTimestamp < block.timestamp && block.timestamp < flow.endTimestamp) {\\n            ratePerSecond = flow.ratePerSecond;\\n        }\\n    }\\n\\n    function getPendingRewards(address _flow) public view virtual returns (uint256 pendingRewards) {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        uint256 paid = flow.paid;\\n        uint256 totalRewards = flow.totalRewards;\\n        uint256 lastRewardTimestamp = flow.lastRewardTimestamp;\\n\\n        if (block.timestamp >= flow.endTimestamp) {\\n            // flow ended\\n            pendingRewards = totalRewards - paid;\\n        } else if (block.timestamp > lastRewardTimestamp) {\\n            // flow active\\n            uint256 secondsFromLastPull = block.timestamp - lastRewardTimestamp;\\n            pendingRewards = secondsFromLastPull * flow.ratePerSecond;\\n\\n            // in case of rounding error, make sure that paid + pending rewards is never more than totalRewards\\n            if (paid + pendingRewards > totalRewards) {\\n                pendingRewards = totalRewards - paid;\\n            }\\n        }\\n    }\\n\\n    function _fundFlow(address _flow, uint256 _amount) internal virtual {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        uint256 secondsToEnd = flow.endTimestamp - flow.lastRewardTimestamp;\\n        uint256 rewardsLeft = secondsToEnd * flow.ratePerSecond;\\n        flow.ratePerSecond = (rewardsLeft + _amount) / secondsToEnd;\\n        flow.totalRewards += _amount;\\n    }\\n\\n    // ADMIN\\n\\n    /// @param _flow address of the contract that gets rewards\\n    /// @param _totalRewards amount of ESSENCE that should be distributed in total\\n    /// @param _startTimestamp when ESSENCE flow should start\\n    /// @param _endTimestamp when ESSENCE flow should end\\n    /// @param _callback should callback be used (if you don't know, set false)\\n    function addFlow(\\n        address _flow,\\n        uint256 _totalRewards,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        bool _callback\\n    ) external virtual onlyRole(ESSENCE_FIELD_CREATOR_ROLE) {\\n        require(_endTimestamp > _startTimestamp, \\\"Rewards must last > 1 sec\\\");\\n        require(!flows.contains(_flow), \\\"Flow for address already exists\\\");\\n\\n        if (flows.add(_flow)) {\\n            flowConfig[_flow] = EssenceFlow({\\n                totalRewards: _totalRewards,\\n                startTimestamp: _startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                lastRewardTimestamp: _startTimestamp,\\n                ratePerSecond: _totalRewards / (_endTimestamp - _startTimestamp),\\n                paid: 0\\n            });\\n            emit FlowAdded(_flow, _totalRewards, _startTimestamp, _endTimestamp);\\n\\n            setCallback(_flow, _callback);\\n        }\\n    }\\n\\n    function fundFlow(address _flow, uint256 _amount)\\n        external\\n        virtual\\n        onlyRole(ESSENCE_FIELD_CREATOR_ROLE)\\n        flowExists(_flow)\\n        flowActive(_flow)\\n        callbackFlow(_flow)\\n    {\\n        _fundFlow(_flow, _amount);\\n        emit FlowFunded(_flow, _amount);\\n    }\\n\\n    function defundFlow(address _flow, uint256 _amount)\\n        external\\n        virtual\\n        onlyRole(ESSENCE_FIELD_CREATOR_ROLE)\\n        flowExists(_flow)\\n        flowActive(_flow)\\n        callbackFlow(_flow)\\n    {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        uint256 secondsToEnd = flow.endTimestamp - flow.lastRewardTimestamp;\\n        uint256 rewardsLeft = secondsToEnd * flow.ratePerSecond;\\n\\n        require(_amount <= rewardsLeft, \\\"Reduce amount too large, rewards already paid\\\");\\n\\n        flow.ratePerSecond = (rewardsLeft - _amount) / secondsToEnd;\\n        flow.totalRewards -= _amount;\\n\\n        emit FlowDefunded(_flow, _amount);\\n    }\\n\\n    function updateFlowTime(\\n        address _flow,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp\\n    ) external virtual onlyRole(ESSENCE_FIELD_CREATOR_ROLE) flowExists(_flow) callbackFlow(_flow) {\\n        EssenceFlow storage flow = flowConfig[_flow];\\n\\n        if (_startTimestamp > 0) {\\n            require(_startTimestamp > block.timestamp, \\\"startTimestamp cannot be in the past\\\");\\n\\n            flow.startTimestamp = _startTimestamp;\\n            flow.lastRewardTimestamp = _startTimestamp;\\n        }\\n\\n        if (_endTimestamp > 0) {\\n            require(_endTimestamp > _startTimestamp, \\\"Rewards must last > 1 sec\\\");\\n            require(_endTimestamp > block.timestamp, \\\"Cannot end rewards in the past\\\");\\n\\n            flow.endTimestamp = _endTimestamp;\\n        }\\n\\n        flow.ratePerSecond = (flow.totalRewards - flow.paid) / (flow.endTimestamp - flow.lastRewardTimestamp);\\n\\n        emit FlowTimeUpdated(_flow, _startTimestamp, _endTimestamp);\\n    }\\n\\n    function removeFlow(address _flow)\\n        external\\n        virtual\\n        onlyRole(ESSENCE_FIELD_CREATOR_ROLE)\\n        flowExists(_flow)\\n        callbackFlow(_flow)\\n    {\\n        if (flows.remove(_flow)) {\\n            delete flowConfig[_flow];\\n            emit FlowRemoved(_flow);\\n        }\\n    }\\n\\n    function setCallback(address _flow, bool _value)\\n        public\\n        virtual\\n        onlyRole(ESSENCE_FIELD_CREATOR_ROLE)\\n        flowExists(_flow)\\n        callbackFlow(_flow)\\n    {\\n        callbackRegistry[_flow] = _value;\\n        emit CallbackSet(_flow, _value);\\n    }\\n\\n    function withdrawEssence(address _to, uint256 _amount) external virtual onlyRole(ESSENCE_FIELD_CREATOR_ROLE) {\\n        essence.safeTransfer(_to, _amount);\\n        emit Withdraw(_to, _amount);\\n    }\\n\\n    function setEssenceToken(address _essence) external virtual onlyRole(ESSENCE_FIELD_CREATOR_ROLE) {\\n        essence = IERC20Upgradeable(_essence);\\n    }\\n}\\n\",\"keccak256\":\"0x6af2c546fae5496b311d347db94554c9cf909eebb0a86eb246871966d49253fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b620019641760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b61281b806200015c6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806391d1485411610104578063b373004e116100a2578063e3c5e66f11610071578063e3c5e66f14610466578063e6868fad14610479578063f6ed2017146104d8578063faa535af146104eb57600080fd5b8063b373004e146103bd578063bdeb4d0a1461042d578063ca15c87314610440578063d547741f1461045357600080fd5b8063a217fddf116100de578063a217fddf1461037b578063aaf5eb6814610383578063ae5c935714610392578063b2eb853f1461039a57600080fd5b806391d1485414610342578063989c33c0146103555780639c1e88c01461036857600080fd5b8063483fdbfb1161017c5780637e11ee0d1161014b5780637e11ee0d146103015780637e38e9b9146103145780639010d07c1461032757806391a2024d1461033a57600080fd5b8063483fdbfb1461029957806359e95eea146102ae5780635c7abcc2146102c15780636afee039146102ec57600080fd5b8063248a9ca3116101b8578063248a9ca31461022f5780632f2ff15d1461026057806336568abe146102735780634744d1661461028657600080fd5b806301ffc9a7146101df57806319ab453c14610207578063204f85891461021c575b600080fd5b6101f26101ed36600461235c565b6104fe565b60405190151581526020015b60405180910390f35b61021a6102153660046123a2565b610529565b005b61021a61022a3660046123bd565b61068b565b61025261023d3660046123f0565b60009081526065602052604090206001015490565b6040519081526020016101fe565b61021a61026e366004612409565b61098e565b61021a610281366004612409565b6109b8565b6102526102943660046123a2565b610a32565b6102526000805160206127c683398151915281565b61021a6102bc3660046123a2565b610a73565b60c9546102d4906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6102f4610c19565b6040516101fe9190612435565b61021a61030f366004612490565b610c2a565b61021a6103223660046124c7565b610dbc565b6102d461033536600461251b565b610f86565b610252610fa5565b6101f2610350366004612409565b610ff0565b61021a61036336600461253d565b61101b565b61021a61037636600461253d565b6112ab565b610252600081565b610252670de0b6b3a764000081565b610252611448565b6101f26103a83660046123a2565b60cd6020526000908152604090205460ff1681565b6104006103cb3660046123a2565b60ca60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101fe565b61021a61043b36600461253d565b6115af565b61025261044e3660046123f0565b611625565b61021a610461366004612409565b61163c565b61021a61047436600461253d565b611661565b61048c6104873660046123a2565b6117fd565b6040516101fe9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6102526104e63660046123a2565b611898565b61021a6104f93660046123a2565b611929565b60006001600160e01b03198216635a05180f60e01b1480610523575061052382611973565b92915050565b600054610100900460ff16158080156105495750600054600160ff909116105b806105635750303b158015610563575060005460ff166001145b6105cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156105ee576000805461ff0019166101001790555b60c980546001600160a01b0319166001600160a01b0384161790556106216000805160206127c6833981519152806119a8565b6106396000805160206127c6833981519152336119f3565b610641611a15565b8015610687576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000805160206127c68339815191526106a381611a82565b836106af60cb82611a8f565b6106cb5760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038516600090815260cd6020526040902054859060ff161561074257806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b505050505b6001600160a01b038616600090815260ca6020526040902085156107ca574286116107bb5760405162461bcd60e51b8152602060048201526024808201527f737461727454696d657374616d702063616e6e6f7420626520696e20746865206044820152631c185cdd60e21b60648201526084016105c2565b60018101869055600381018690555b84156108725785851161081b5760405162461bcd60e51b815260206004820152601960248201527852657761726473206d757374206c617374203e20312073656360381b60448201526064016105c2565b42851161086a5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420656e64207265776172647320696e207468652070617374000060448201526064016105c2565b600281018590555b670de0b6b3a76400008160030154826002015461088f91906125aa565b60058301548354670de0b6b3a7640000916108a9916125aa565b6108b391906125bd565b6108bd91906125dc565b6108c791906125dc565b600482015560408051878152602081018790526001600160a01b038916917f7a64782400476b9f095c4a017385a74eb56752241c05e67edb613d5438ce8305910160405180910390a2506001600160a01b038116600090815260cd602052604090205460ff161561098657806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b505050505b505050505050565b6000828152606560205260409020600101546109a981611a82565b6109b383836119f3565b505050565b6001600160a01b0381163314610a285760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105c2565b6106878282611ab1565b6001600160a01b038116600090815260ca60205260408120600181015442118015610a605750806002015442105b15610a6d57806004015491505b50919050565b6000805160206127c6833981519152610a8b81611a82565b81610a9760cb82611a8f565b610ab35760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038316600090815260cd6020526040902054839060ff1615610b2a57806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b1157600080fd5b505af1158015610b25573d6000803e3d6000fd5b505050505b610b3560cb85611acf565b15610b9e576001600160a01b038416600081815260ca602052604080822082815560018101839055600281018390556003810183905560048101839055600501829055517fac0c9b359342d5dadbe051c7a44df3eb16c3a882c575cb0c24d09e69f344c4cd9190a25b6001600160a01b038116600090815260cd602052604090205460ff1615610c1357806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050505b50505050565b6060610c2560cb611ae4565b905090565b6000805160206127c6833981519152610c4281611a82565b82610c4e60cb82611a8f565b610c6a5760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038416600090815260cd6020526040902054849060ff1615610ce157806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b505050505b6001600160a01b038516600081815260cd6020908152604091829020805460ff19168815159081179091558251938452908301527fb5541a615b23b714aea0fdeb7ca01ff9286be2c990ab585f7dc8f094701ff50f910160405180910390a16001600160a01b038116600090815260cd602052604090205460ff1615610db557806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b505050505b5050505050565b6000805160206127c6833981519152610dd481611a82565b838311610e1f5760405162461bcd60e51b815260206004820152601960248201527852657761726473206d757374206c617374203e20312073656360381b60448201526064016105c2565b610e2a60cb87611a8f565b15610e775760405162461bcd60e51b815260206004820152601f60248201527f466c6f7720666f72206164647265737320616c7265616479206578697374730060448201526064016105c2565b610e8260cb87611af1565b15610986576040518060c00160405280868152602001858152602001848152602001858152602001670de0b6b3a76400008686610ebf91906125aa565b610ed1670de0b6b3a76400008a6125bd565b610edb91906125dc565b610ee591906125dc565b8152600060209182018190526001600160a01b03891680825260ca83526040918290208451815584840151600182015584830151600282015560608086015160038301556080860151600483015560a0909501516005909101558151898152928301889052908201869052917f524794d0cc1a37b020a21028413d745fb829bbd3db9552141148487d7733c66f910160405180910390a26109868683610c2a565b6000828152609760205260408120610f9e9083611b06565b9392505050565b600080610fb260cb611b12565b905060005b81811015610feb57610fcd61029460cb83611b06565b610fd790846125fe565b925080610fe381612611565b915050610fb7565b505090565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206127c683398151915261103381611a82565b8261103f60cb82611a8f565b61105b5760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038416600090815260ca6020526040902060020154849042106110975760405162461bcd60e51b81526004016105c29061262a565b6001600160a01b038516600090815260cd6020526040902054859060ff161561110e57806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110f557600080fd5b505af1158015611109573d6000803e3d6000fd5b505050505b6001600160a01b038616600090815260ca602052604081206003810154600282015491929161113d91906125aa565b905060008260050154836000015461115591906125aa565b9050808811156111bd5760405162461bcd60e51b815260206004820152602d60248201527f52656475636520616d6f756e7420746f6f206c617267652c207265776172647360448201526c08185b1c9958591e481c185a59609a1b60648201526084016105c2565b670de0b6b3a764000082816111d28b856125aa565b6111dc91906125bd565b6111e691906125dc565b6111f091906125dc565b60048401558254889084906000906112099084906125aa565b90915550506040518881526001600160a01b038a16907f9aea882777a026e561213aaa6fab753a56532b6f3764f1b2851cbb261e91bc2c9060200160405180910390a25050506001600160a01b038116600090815260cd602052604090205460ff161561098657806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096d57600080fd5b816112b760cb82611a8f565b6112d35760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038316600090815260ca60205260409020600201548390421061130f5760405162461bcd60e51b81526004016105c29061262a565b6001600160a01b038416600090815260cd6020526040902054849060ff161561138657806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b505050505b6113908585611b1c565b60c9546113a8906001600160a01b0316333087611bb9565b60408051338152602081018690526001600160a01b038716917f2ad253ffea8ff783a71e19ed79d6880bf9e1c8cc935582803340c62524c0d522910160405180910390a26001600160a01b038116600090815260cd602052604090205460ff1615610db557806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d9c57600080fd5b33600081815260ca60205260408120909161146290611898565b91508115806114da575060c9546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d8919061264e565b105b156114e757600091505090565b818160050160008282546114fb91906125fe565b909155505042600382015580546005820154111561154e5760405162461bcd60e51b815260206004820152601060248201526f52657761726473206f766572666c6f7760801b60448201526064016105c2565b60c954611565906001600160a01b03163384611c24565b600581015460405133917f53195aae24c76f608fd5b9b6ee2da62eb3a6f4e5279d15a8ddfef43199a4b38e916115a391868252602082015260400190565b60405180910390a25090565b6000805160206127c68339815191526115c781611a82565b60c9546115de906001600160a01b03168484611c24565b604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910160405180910390a1505050565b600081815260976020526040812061052390611b12565b60008281526065602052604090206001015461165781611a82565b6109b38383611ab1565b6000805160206127c683398151915261167981611a82565b8261168560cb82611a8f565b6116a15760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038416600090815260ca6020526040902060020154849042106116dd5760405162461bcd60e51b81526004016105c29061262a565b6001600160a01b038516600090815260cd6020526040902054859060ff161561175457806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561173b57600080fd5b505af115801561174f573d6000803e3d6000fd5b505050505b61175e8686611b1c565b856001600160a01b03167f1fb19fb97797ac8a07575d49f5e4022becd0870c4581a361eebd132f577a4c7b8660405161179991815260200190565b60405180910390a26001600160a01b038116600090815260cd602052604090205460ff161561098657806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096d57600080fd5b6118366040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506001600160a01b0316600090815260ca6020908152604091829020825160c08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a082015290565b6001600160a01b038116600090815260ca60205260408120600581015481546003830154600284015442106118d8576118d183836125aa565b9450611920565b804211156119205760006118ec82426125aa565b90508460040154816118fe91906125bd565b95508261190b87866125fe565b111561191e5761191b84846125aa565b95505b505b50505050919050565b6000805160206127c683398151915261194181611a82565b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006001600160e01b03198216637965db0b60e01b148061052357506301ffc9a760e01b6001600160e01b0319831614610523565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6119fd8282611c54565b60008281526097602052604090206109b39082611af1565b600054610100900460ff16611a805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105c2565b565b611a8c8133611cda565b50565b6001600160a01b03811660009081526001830160205260408120541515610f9e565b611abb8282611d3e565b60008281526097602052604090206109b390825b6000610f9e836001600160a01b038416611da5565b60606000610f9e83611e98565b6000610f9e836001600160a01b038416611ef4565b6000610f9e8383611f43565b6000610523825490565b6001600160a01b038216600090815260ca6020526040812060038101546002820154919291611b4b91906125aa565b90506000826004015482611b5f91906125bd565b9050670de0b6b3a76400008281611b7687856125fe565b611b8091906125bd565b611b8a91906125dc565b611b9491906125dc565b6004840155825484908490600090611bad9084906125fe565b90915550505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c139085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f6d565b6040516001600160a01b0383166024820152604481018290526109b390849063a9059cbb60e01b90606401611bed565b611c5e8282610ff0565b6106875760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ce48282610ff0565b61068757611cfc816001600160a01b0316601461203f565b611d0783602061203f565b604051602001611d1892919061268b565b60408051601f198184030181529082905262461bcd60e51b82526105c291600401612700565b611d488282610ff0565b156106875760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611e8e576000611dc96001836125aa565b8554909150600090611ddd906001906125aa565b9050818114611e42576000866000018281548110611dfd57611dfd612733565b9060005260206000200154905080876000018481548110611e2057611e20612733565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e5357611e53612749565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610523565b6000915050610523565b606081600001805480602002602001604051908101604052809291908181526020018280548015611ee857602002820191906000526020600020905b815481526020019060010190808311611ed4575b50505050509050919050565b6000818152600183016020526040812054611f3b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610523565b506000610523565b6000826000018281548110611f5a57611f5a612733565b9060005260206000200154905092915050565b6000611fc2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121db9092919063ffffffff16565b8051909150156109b35780806020019051810190611fe0919061275f565b6109b35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c2565b6060600061204e8360026125bd565b6120599060026125fe565b67ffffffffffffffff8111156120715761207161277c565b6040519080825280601f01601f19166020018201604052801561209b576020820181803683370190505b509050600360fc1b816000815181106120b6576120b6612733565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106120e5576120e5612733565b60200101906001600160f81b031916908160001a90535060006121098460026125bd565b6121149060016125fe565b90505b600181111561218c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061214857612148612733565b1a60f81b82828151811061215e5761215e612733565b60200101906001600160f81b031916908160001a90535060049490941c9361218581612792565b9050612117565b508315610f9e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105c2565b60606121ea84846000856121f2565b949350505050565b6060824710156122535760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c2565b6001600160a01b0385163b6122aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c2565b600080866001600160a01b031685876040516122c691906127a9565b60006040518083038185875af1925050503d8060008114612303576040519150601f19603f3d011682016040523d82523d6000602084013e612308565b606091505b5091509150612318828286612323565b979650505050505050565b60608315612332575081610f9e565b8251156123425782518084602001fd5b8160405162461bcd60e51b81526004016105c29190612700565b60006020828403121561236e57600080fd5b81356001600160e01b031981168114610f9e57600080fd5b80356001600160a01b038116811461239d57600080fd5b919050565b6000602082840312156123b457600080fd5b610f9e82612386565b6000806000606084860312156123d257600080fd5b6123db84612386565b95602085013595506040909401359392505050565b60006020828403121561240257600080fd5b5035919050565b6000806040838503121561241c57600080fd5b8235915061242c60208401612386565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156124765783516001600160a01b031683529284019291840191600101612451565b50909695505050505050565b8015158114611a8c57600080fd5b600080604083850312156124a357600080fd5b6124ac83612386565b915060208301356124bc81612482565b809150509250929050565b600080600080600060a086880312156124df57600080fd5b6124e886612386565b9450602086013593506040860135925060608601359150608086013561250d81612482565b809150509295509295909350565b6000806040838503121561252e57600080fd5b50508035926020909101359150565b6000806040838503121561255057600080fd5b61255983612386565b946020939093013593505050565b602080825260139082015272119b1bddc8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561052357610523612594565b60008160001904831182151516156125d7576125d7612594565b500290565b6000826125f957634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561052357610523612594565b60006001820161262357612623612594565b5060010190565b6020808252600a9082015269119b1bddc8195b99195960b21b604082015260600190565b60006020828403121561266057600080fd5b5051919050565b60005b8381101561268257818101518382015260200161266a565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126c3816017850160208801612667565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126f4816028840160208801612667565b01602801949350505050565b602081526000825180602084015261271f816040850160208701612667565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561277157600080fd5b8151610f9e81612482565b634e487b7160e01b600052604160045260246000fd5b6000816127a1576127a1612594565b506000190190565b600082516127bb818460208701612667565b919091019291505056fe7bf6ef789eb80773c7781b0e42ea7bca86828f4880d963549f5b220bf0301e5aa2646970667358221220282333740ead830cef6061e8b3113de6e9a850e216d1eab63f078e7a78af6cb264736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806391d1485411610104578063b373004e116100a2578063e3c5e66f11610071578063e3c5e66f14610466578063e6868fad14610479578063f6ed2017146104d8578063faa535af146104eb57600080fd5b8063b373004e146103bd578063bdeb4d0a1461042d578063ca15c87314610440578063d547741f1461045357600080fd5b8063a217fddf116100de578063a217fddf1461037b578063aaf5eb6814610383578063ae5c935714610392578063b2eb853f1461039a57600080fd5b806391d1485414610342578063989c33c0146103555780639c1e88c01461036857600080fd5b8063483fdbfb1161017c5780637e11ee0d1161014b5780637e11ee0d146103015780637e38e9b9146103145780639010d07c1461032757806391a2024d1461033a57600080fd5b8063483fdbfb1461029957806359e95eea146102ae5780635c7abcc2146102c15780636afee039146102ec57600080fd5b8063248a9ca3116101b8578063248a9ca31461022f5780632f2ff15d1461026057806336568abe146102735780634744d1661461028657600080fd5b806301ffc9a7146101df57806319ab453c14610207578063204f85891461021c575b600080fd5b6101f26101ed36600461235c565b6104fe565b60405190151581526020015b60405180910390f35b61021a6102153660046123a2565b610529565b005b61021a61022a3660046123bd565b61068b565b61025261023d3660046123f0565b60009081526065602052604090206001015490565b6040519081526020016101fe565b61021a61026e366004612409565b61098e565b61021a610281366004612409565b6109b8565b6102526102943660046123a2565b610a32565b6102526000805160206127c683398151915281565b61021a6102bc3660046123a2565b610a73565b60c9546102d4906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b6102f4610c19565b6040516101fe9190612435565b61021a61030f366004612490565b610c2a565b61021a6103223660046124c7565b610dbc565b6102d461033536600461251b565b610f86565b610252610fa5565b6101f2610350366004612409565b610ff0565b61021a61036336600461253d565b61101b565b61021a61037636600461253d565b6112ab565b610252600081565b610252670de0b6b3a764000081565b610252611448565b6101f26103a83660046123a2565b60cd6020526000908152604090205460ff1681565b6104006103cb3660046123a2565b60ca60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101fe565b61021a61043b36600461253d565b6115af565b61025261044e3660046123f0565b611625565b61021a610461366004612409565b61163c565b61021a61047436600461253d565b611661565b61048c6104873660046123a2565b6117fd565b6040516101fe9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6102526104e63660046123a2565b611898565b61021a6104f93660046123a2565b611929565b60006001600160e01b03198216635a05180f60e01b1480610523575061052382611973565b92915050565b600054610100900460ff16158080156105495750600054600160ff909116105b806105635750303b158015610563575060005460ff166001145b6105cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156105ee576000805461ff0019166101001790555b60c980546001600160a01b0319166001600160a01b0384161790556106216000805160206127c6833981519152806119a8565b6106396000805160206127c6833981519152336119f3565b610641611a15565b8015610687576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000805160206127c68339815191526106a381611a82565b836106af60cb82611a8f565b6106cb5760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038516600090815260cd6020526040902054859060ff161561074257806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b505050505b6001600160a01b038616600090815260ca6020526040902085156107ca574286116107bb5760405162461bcd60e51b8152602060048201526024808201527f737461727454696d657374616d702063616e6e6f7420626520696e20746865206044820152631c185cdd60e21b60648201526084016105c2565b60018101869055600381018690555b84156108725785851161081b5760405162461bcd60e51b815260206004820152601960248201527852657761726473206d757374206c617374203e20312073656360381b60448201526064016105c2565b42851161086a5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420656e64207265776172647320696e207468652070617374000060448201526064016105c2565b600281018590555b670de0b6b3a76400008160030154826002015461088f91906125aa565b60058301548354670de0b6b3a7640000916108a9916125aa565b6108b391906125bd565b6108bd91906125dc565b6108c791906125dc565b600482015560408051878152602081018790526001600160a01b038916917f7a64782400476b9f095c4a017385a74eb56752241c05e67edb613d5438ce8305910160405180910390a2506001600160a01b038116600090815260cd602052604090205460ff161561098657806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b505050505b505050505050565b6000828152606560205260409020600101546109a981611a82565b6109b383836119f3565b505050565b6001600160a01b0381163314610a285760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105c2565b6106878282611ab1565b6001600160a01b038116600090815260ca60205260408120600181015442118015610a605750806002015442105b15610a6d57806004015491505b50919050565b6000805160206127c6833981519152610a8b81611a82565b81610a9760cb82611a8f565b610ab35760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038316600090815260cd6020526040902054839060ff1615610b2a57806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b1157600080fd5b505af1158015610b25573d6000803e3d6000fd5b505050505b610b3560cb85611acf565b15610b9e576001600160a01b038416600081815260ca602052604080822082815560018101839055600281018390556003810183905560048101839055600501829055517fac0c9b359342d5dadbe051c7a44df3eb16c3a882c575cb0c24d09e69f344c4cd9190a25b6001600160a01b038116600090815260cd602052604090205460ff1615610c1357806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050505b50505050565b6060610c2560cb611ae4565b905090565b6000805160206127c6833981519152610c4281611a82565b82610c4e60cb82611a8f565b610c6a5760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038416600090815260cd6020526040902054849060ff1615610ce157806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b505050505b6001600160a01b038516600081815260cd6020908152604091829020805460ff19168815159081179091558251938452908301527fb5541a615b23b714aea0fdeb7ca01ff9286be2c990ab585f7dc8f094701ff50f910160405180910390a16001600160a01b038116600090815260cd602052604090205460ff1615610db557806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b505050505b5050505050565b6000805160206127c6833981519152610dd481611a82565b838311610e1f5760405162461bcd60e51b815260206004820152601960248201527852657761726473206d757374206c617374203e20312073656360381b60448201526064016105c2565b610e2a60cb87611a8f565b15610e775760405162461bcd60e51b815260206004820152601f60248201527f466c6f7720666f72206164647265737320616c7265616479206578697374730060448201526064016105c2565b610e8260cb87611af1565b15610986576040518060c00160405280868152602001858152602001848152602001858152602001670de0b6b3a76400008686610ebf91906125aa565b610ed1670de0b6b3a76400008a6125bd565b610edb91906125dc565b610ee591906125dc565b8152600060209182018190526001600160a01b03891680825260ca83526040918290208451815584840151600182015584830151600282015560608086015160038301556080860151600483015560a0909501516005909101558151898152928301889052908201869052917f524794d0cc1a37b020a21028413d745fb829bbd3db9552141148487d7733c66f910160405180910390a26109868683610c2a565b6000828152609760205260408120610f9e9083611b06565b9392505050565b600080610fb260cb611b12565b905060005b81811015610feb57610fcd61029460cb83611b06565b610fd790846125fe565b925080610fe381612611565b915050610fb7565b505090565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206127c683398151915261103381611a82565b8261103f60cb82611a8f565b61105b5760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038416600090815260ca6020526040902060020154849042106110975760405162461bcd60e51b81526004016105c29061262a565b6001600160a01b038516600090815260cd6020526040902054859060ff161561110e57806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110f557600080fd5b505af1158015611109573d6000803e3d6000fd5b505050505b6001600160a01b038616600090815260ca602052604081206003810154600282015491929161113d91906125aa565b905060008260050154836000015461115591906125aa565b9050808811156111bd5760405162461bcd60e51b815260206004820152602d60248201527f52656475636520616d6f756e7420746f6f206c617267652c207265776172647360448201526c08185b1c9958591e481c185a59609a1b60648201526084016105c2565b670de0b6b3a764000082816111d28b856125aa565b6111dc91906125bd565b6111e691906125dc565b6111f091906125dc565b60048401558254889084906000906112099084906125aa565b90915550506040518881526001600160a01b038a16907f9aea882777a026e561213aaa6fab753a56532b6f3764f1b2851cbb261e91bc2c9060200160405180910390a25050506001600160a01b038116600090815260cd602052604090205460ff161561098657806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096d57600080fd5b816112b760cb82611a8f565b6112d35760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038316600090815260ca60205260409020600201548390421061130f5760405162461bcd60e51b81526004016105c29061262a565b6001600160a01b038416600090815260cd6020526040902054849060ff161561138657806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b505050505b6113908585611b1c565b60c9546113a8906001600160a01b0316333087611bb9565b60408051338152602081018690526001600160a01b038716917f2ad253ffea8ff783a71e19ed79d6880bf9e1c8cc935582803340c62524c0d522910160405180910390a26001600160a01b038116600090815260cd602052604090205460ff1615610db557806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d9c57600080fd5b33600081815260ca60205260408120909161146290611898565b91508115806114da575060c9546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d8919061264e565b105b156114e757600091505090565b818160050160008282546114fb91906125fe565b909155505042600382015580546005820154111561154e5760405162461bcd60e51b815260206004820152601060248201526f52657761726473206f766572666c6f7760801b60448201526064016105c2565b60c954611565906001600160a01b03163384611c24565b600581015460405133917f53195aae24c76f608fd5b9b6ee2da62eb3a6f4e5279d15a8ddfef43199a4b38e916115a391868252602082015260400190565b60405180910390a25090565b6000805160206127c68339815191526115c781611a82565b60c9546115de906001600160a01b03168484611c24565b604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910160405180910390a1505050565b600081815260976020526040812061052390611b12565b60008281526065602052604090206001015461165781611a82565b6109b38383611ab1565b6000805160206127c683398151915261167981611a82565b8261168560cb82611a8f565b6116a15760405162461bcd60e51b81526004016105c290612567565b6001600160a01b038416600090815260ca6020526040902060020154849042106116dd5760405162461bcd60e51b81526004016105c29061262a565b6001600160a01b038516600090815260cd6020526040902054859060ff161561175457806001600160a01b031663bc1f03286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561173b57600080fd5b505af115801561174f573d6000803e3d6000fd5b505050505b61175e8686611b1c565b856001600160a01b03167f1fb19fb97797ac8a07575d49f5e4022becd0870c4581a361eebd132f577a4c7b8660405161179991815260200190565b60405180910390a26001600160a01b038116600090815260cd602052604090205460ff161561098657806001600160a01b0316634f9845196040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561096d57600080fd5b6118366040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506001600160a01b0316600090815260ca6020908152604091829020825160c08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a082015290565b6001600160a01b038116600090815260ca60205260408120600581015481546003830154600284015442106118d8576118d183836125aa565b9450611920565b804211156119205760006118ec82426125aa565b90508460040154816118fe91906125bd565b95508261190b87866125fe565b111561191e5761191b84846125aa565b95505b505b50505050919050565b6000805160206127c683398151915261194181611a82565b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006001600160e01b03198216637965db0b60e01b148061052357506301ffc9a760e01b6001600160e01b0319831614610523565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6119fd8282611c54565b60008281526097602052604090206109b39082611af1565b600054610100900460ff16611a805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105c2565b565b611a8c8133611cda565b50565b6001600160a01b03811660009081526001830160205260408120541515610f9e565b611abb8282611d3e565b60008281526097602052604090206109b390825b6000610f9e836001600160a01b038416611da5565b60606000610f9e83611e98565b6000610f9e836001600160a01b038416611ef4565b6000610f9e8383611f43565b6000610523825490565b6001600160a01b038216600090815260ca6020526040812060038101546002820154919291611b4b91906125aa565b90506000826004015482611b5f91906125bd565b9050670de0b6b3a76400008281611b7687856125fe565b611b8091906125bd565b611b8a91906125dc565b611b9491906125dc565b6004840155825484908490600090611bad9084906125fe565b90915550505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c139085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f6d565b6040516001600160a01b0383166024820152604481018290526109b390849063a9059cbb60e01b90606401611bed565b611c5e8282610ff0565b6106875760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ce48282610ff0565b61068757611cfc816001600160a01b0316601461203f565b611d0783602061203f565b604051602001611d1892919061268b565b60408051601f198184030181529082905262461bcd60e51b82526105c291600401612700565b611d488282610ff0565b156106875760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611e8e576000611dc96001836125aa565b8554909150600090611ddd906001906125aa565b9050818114611e42576000866000018281548110611dfd57611dfd612733565b9060005260206000200154905080876000018481548110611e2057611e20612733565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e5357611e53612749565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610523565b6000915050610523565b606081600001805480602002602001604051908101604052809291908181526020018280548015611ee857602002820191906000526020600020905b815481526020019060010190808311611ed4575b50505050509050919050565b6000818152600183016020526040812054611f3b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610523565b506000610523565b6000826000018281548110611f5a57611f5a612733565b9060005260206000200154905092915050565b6000611fc2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121db9092919063ffffffff16565b8051909150156109b35780806020019051810190611fe0919061275f565b6109b35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c2565b6060600061204e8360026125bd565b6120599060026125fe565b67ffffffffffffffff8111156120715761207161277c565b6040519080825280601f01601f19166020018201604052801561209b576020820181803683370190505b509050600360fc1b816000815181106120b6576120b6612733565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106120e5576120e5612733565b60200101906001600160f81b031916908160001a90535060006121098460026125bd565b6121149060016125fe565b90505b600181111561218c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061214857612148612733565b1a60f81b82828151811061215e5761215e612733565b60200101906001600160f81b031916908160001a90535060049490941c9361218581612792565b9050612117565b508315610f9e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105c2565b60606121ea84846000856121f2565b949350505050565b6060824710156122535760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c2565b6001600160a01b0385163b6122aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c2565b600080866001600160a01b031685876040516122c691906127a9565b60006040518083038185875af1925050503d8060008114612303576040519150601f19603f3d011682016040523d82523d6000602084013e612308565b606091505b5091509150612318828286612323565b979650505050505050565b60608315612332575081610f9e565b8251156123425782518084602001fd5b8160405162461bcd60e51b81526004016105c29190612700565b60006020828403121561236e57600080fd5b81356001600160e01b031981168114610f9e57600080fd5b80356001600160a01b038116811461239d57600080fd5b919050565b6000602082840312156123b457600080fd5b610f9e82612386565b6000806000606084860312156123d257600080fd5b6123db84612386565b95602085013595506040909401359392505050565b60006020828403121561240257600080fd5b5035919050565b6000806040838503121561241c57600080fd5b8235915061242c60208401612386565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156124765783516001600160a01b031683529284019291840191600101612451565b50909695505050505050565b8015158114611a8c57600080fd5b600080604083850312156124a357600080fd5b6124ac83612386565b915060208301356124bc81612482565b809150509250929050565b600080600080600060a086880312156124df57600080fd5b6124e886612386565b9450602086013593506040860135925060608601359150608086013561250d81612482565b809150509295509295909350565b6000806040838503121561252e57600080fd5b50508035926020909101359150565b6000806040838503121561255057600080fd5b61255983612386565b946020939093013593505050565b602080825260139082015272119b1bddc8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561052357610523612594565b60008160001904831182151516156125d7576125d7612594565b500290565b6000826125f957634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561052357610523612594565b60006001820161262357612623612594565b5060010190565b6020808252600a9082015269119b1bddc8195b99195960b21b604082015260600190565b60006020828403121561266057600080fd5b5051919050565b60005b8381101561268257818101518382015260200161266a565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126c3816017850160208801612667565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126f4816028840160208801612667565b01602801949350505050565b602081526000825180602084015261271f816040850160208701612667565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561277157600080fd5b8151610f9e81612482565b634e487b7160e01b600052604160045260246000fd5b6000816127a1576127a1612594565b506000190190565b600082516127bb818460208701612667565b919091019291505056fe7bf6ef789eb80773c7781b0e42ea7bca86828f4880d963549f5b220bf0301e5aa2646970667358221220282333740ead830cef6061e8b3113de6e9a850e216d1eab63f078e7a78af6cb264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addFlow(address,uint256,uint256,uint256,bool)": {
        "params": {
          "_callback": "should callback be used (if you don't know, set false)",
          "_endTimestamp": "when ESSENCE flow should end",
          "_flow": "address of the contract that gets rewards",
          "_startTimestamp": "when ESSENCE flow should start",
          "_totalRewards": "amount of ESSENCE that should be distributed in total"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callbackRegistry(address)": {
        "notice": "flow address => bool"
      },
      "flowConfig(address)": {
        "notice": "flow address => EssenceFlow"
      },
      "requestRewards()": {
        "notice": "how anyone can call this function but only flows that exist have amounts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 838,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 841,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2065,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2335,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 433,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)428_storage)"
      },
      {
        "astId": 732,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 282,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4511_storage)"
      },
      {
        "astId": 392,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17434,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "essence",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20Upgradeable)1348"
      },
      {
        "astId": 17440,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "flowConfig",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_struct(EssenceFlow)12325_storage)"
      },
      {
        "astId": 17444,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "flows",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(AddressSet)4511_storage"
      },
      {
        "astId": 17449,
        "contract": "contracts/modules/EssenceField.sol:EssenceField",
        "label": "callbackRegistry",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)1348": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(EssenceFlow)12325_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IEssenceField.EssenceFlow)",
        "numberOfBytes": "32",
        "value": "t_struct(EssenceFlow)12325_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4511_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4511_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)428_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)428_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4511_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4510,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4210_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(EssenceFlow)12325_storage": {
        "encoding": "inplace",
        "label": "struct IEssenceField.EssenceFlow",
        "members": [
          {
            "astId": 12314,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "totalRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12316,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12318,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12320,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12322,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "ratePerSecond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12324,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "paid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)428_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 425,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 427,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4210_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4205,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4209,
            "contract": "contracts/modules/EssenceField.sol:EssenceField",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}